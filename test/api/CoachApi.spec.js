/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KolibriApi.CoachApi();
  });

  describe('(package)', function() {
    describe('CoachApi', function() {
      describe('coachApiClasssummaryRead', function() {
        it('should call coachApiClasssummaryRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiClasssummaryRead call
          /*
          var id = "id_example";

          instance.coachApiClasssummaryRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiExercisedifficultiesRead', function() {
        it('should call coachApiExercisedifficultiesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiExercisedifficultiesRead call
          /*
          var id = "id_example";

          instance.coachApiExercisedifficultiesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiLessonreportList', function() {
        it('should call coachApiLessonreportList successfully', function(done) {
          // TODO: uncomment coachApiLessonreportList call and complete the assertions
          /*

          instance.coachApiLessonreportList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.LessonReport);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.progress).to.be.a('string');
              expect(data.progress).to.be("");
              expect(data.totalLearners).to.be.a('string');
              expect(data.totalLearners).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiLessonreportRead', function() {
        it('should call coachApiLessonreportRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiLessonreportRead call and complete the assertions
          /*
          var id = "id_example";

          instance.coachApiLessonreportRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.LessonReport);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.progress).to.be.a('string');
            expect(data.progress).to.be("");
            expect(data.totalLearners).to.be.a('string');
            expect(data.totalLearners).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsCreate', function() {
        it('should call coachApiNotificationsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiNotificationsCreate call and complete the assertions
          /*
          var data = null;

          instance.coachApiNotificationsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsDelete', function() {
        it('should call coachApiNotificationsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiNotificationsDelete call
          /*
          var id = "id_example";

          instance.coachApiNotificationsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsList', function() {
        it('should call coachApiNotificationsList successfully', function(done) {
          // TODO: uncomment coachApiNotificationsList call and complete the assertions
          /*

          instance.coachApiNotificationsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsPartialUpdate', function() {
        it('should call coachApiNotificationsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiNotificationsPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = null;

          instance.coachApiNotificationsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsRead', function() {
        it('should call coachApiNotificationsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiNotificationsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.coachApiNotificationsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiNotificationsUpdate', function() {
        it('should call coachApiNotificationsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiNotificationsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = null;

          instance.coachApiNotificationsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('coachApiQuizdifficultiesRead', function() {
        it('should call coachApiQuizdifficultiesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for coachApiQuizdifficultiesRead call
          /*
          var id = "id_example";

          instance.coachApiQuizdifficultiesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
