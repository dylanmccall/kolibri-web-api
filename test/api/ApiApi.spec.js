/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KolibriApi.ApiApi();
  });

  describe('(package)', function() {
    describe('ApiApi', function() {
      describe('apiAuthClassroomCreate', function() {
        it('should call apiAuthClassroomCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomCreate call and complete the assertions
          /*
          var data = new KolibriApi.Classroom();
          data.name = "";
          data.parent = "";

          instance.apiAuthClassroomCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Classroom);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthClassroomDelete', function() {
        it('should call apiAuthClassroomDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomDelete call
          /*
          var id = "id_example";

          instance.apiAuthClassroomDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthClassroomList', function() {
        it('should call apiAuthClassroomList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomList call and complete the assertions
          /*
          var opts = {};
          opts.role = "role_example";
          opts.parent = "parent_example";

          instance.apiAuthClassroomList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Classroom);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.parent).to.be.a('string');
              expect(data.parent).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthClassroomPartialUpdate', function() {
        it('should call apiAuthClassroomPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Classroom();
          data.name = "";
          data.parent = "";

          instance.apiAuthClassroomPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Classroom);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthClassroomRead', function() {
        it('should call apiAuthClassroomRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthClassroomRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Classroom);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthClassroomUpdate', function() {
        it('should call apiAuthClassroomUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthClassroomUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Classroom();
          data.name = "";
          data.parent = "";

          instance.apiAuthClassroomUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Classroom);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityCreate', function() {
        it('should call apiAuthFacilityCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityCreate call and complete the assertions
          /*
          var data = new KolibriApi.Facility();
          data.name = "";

          instance.apiAuthFacilityCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Facility);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityDelete', function() {
        it('should call apiAuthFacilityDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityDelete call
          /*
          var id = "id_example";

          instance.apiAuthFacilityDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityList', function() {
        it('should call apiAuthFacilityList successfully', function(done) {
          // TODO: uncomment apiAuthFacilityList call and complete the assertions
          /*

          instance.apiAuthFacilityList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Facility);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityPartialUpdate', function() {
        it('should call apiAuthFacilityPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Facility();
          data.name = "";

          instance.apiAuthFacilityPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Facility);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityRead', function() {
        it('should call apiAuthFacilityRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthFacilityRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Facility);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityUpdate', function() {
        it('should call apiAuthFacilityUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Facility();
          data.name = "";

          instance.apiAuthFacilityUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Facility);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetCreate', function() {
        it('should call apiAuthFacilitydatasetCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetCreate call and complete the assertions
          /*
          var data = new KolibriApi.FacilityDataset();
          data.learnerCanEditUsername = false;
          data.learnerCanEditName = false;
          data.learnerCanEditPassword = false;
          data.learnerCanSignUp = false;
          data.learnerCanDeleteAccount = false;
          data.learnerCanLoginWithNoPassword = false;
          data.showDownloadButtonInLearn = false;
          data.description = "";
          data.location = "";
          data.registered = false;
          data.preset = "formal";

          instance.apiAuthFacilitydatasetCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityDataset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.learnerCanEditUsername).to.be.a('boolean');
            expect(data.learnerCanEditUsername).to.be(false);
            expect(data.learnerCanEditName).to.be.a('boolean');
            expect(data.learnerCanEditName).to.be(false);
            expect(data.learnerCanEditPassword).to.be.a('boolean');
            expect(data.learnerCanEditPassword).to.be(false);
            expect(data.learnerCanSignUp).to.be.a('boolean');
            expect(data.learnerCanSignUp).to.be(false);
            expect(data.learnerCanDeleteAccount).to.be.a('boolean');
            expect(data.learnerCanDeleteAccount).to.be(false);
            expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
            expect(data.learnerCanLoginWithNoPassword).to.be(false);
            expect(data.showDownloadButtonInLearn).to.be.a('boolean');
            expect(data.showDownloadButtonInLearn).to.be(false);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.registered).to.be.a('boolean');
            expect(data.registered).to.be(false);
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetDelete', function() {
        it('should call apiAuthFacilitydatasetDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetDelete call
          /*
          var id = "id_example";

          instance.apiAuthFacilitydatasetDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetList', function() {
        it('should call apiAuthFacilitydatasetList successfully', function(done) {
          // TODO: uncomment apiAuthFacilitydatasetList call and complete the assertions
          /*

          instance.apiAuthFacilitydatasetList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.FacilityDataset);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.learnerCanEditUsername).to.be.a('boolean');
              expect(data.learnerCanEditUsername).to.be(false);
              expect(data.learnerCanEditName).to.be.a('boolean');
              expect(data.learnerCanEditName).to.be(false);
              expect(data.learnerCanEditPassword).to.be.a('boolean');
              expect(data.learnerCanEditPassword).to.be(false);
              expect(data.learnerCanSignUp).to.be.a('boolean');
              expect(data.learnerCanSignUp).to.be(false);
              expect(data.learnerCanDeleteAccount).to.be.a('boolean');
              expect(data.learnerCanDeleteAccount).to.be(false);
              expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
              expect(data.learnerCanLoginWithNoPassword).to.be(false);
              expect(data.showDownloadButtonInLearn).to.be.a('boolean');
              expect(data.showDownloadButtonInLearn).to.be(false);
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.location).to.be.a('string');
              expect(data.location).to.be("");
              expect(data.registered).to.be.a('boolean');
              expect(data.registered).to.be(false);
              expect(data.preset).to.be.a('string');
              expect(data.preset).to.be("formal");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetPartialUpdate', function() {
        it('should call apiAuthFacilitydatasetPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.FacilityDataset();
          data.learnerCanEditUsername = false;
          data.learnerCanEditName = false;
          data.learnerCanEditPassword = false;
          data.learnerCanSignUp = false;
          data.learnerCanDeleteAccount = false;
          data.learnerCanLoginWithNoPassword = false;
          data.showDownloadButtonInLearn = false;
          data.description = "";
          data.location = "";
          data.registered = false;
          data.preset = "formal";

          instance.apiAuthFacilitydatasetPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityDataset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.learnerCanEditUsername).to.be.a('boolean');
            expect(data.learnerCanEditUsername).to.be(false);
            expect(data.learnerCanEditName).to.be.a('boolean');
            expect(data.learnerCanEditName).to.be(false);
            expect(data.learnerCanEditPassword).to.be.a('boolean');
            expect(data.learnerCanEditPassword).to.be(false);
            expect(data.learnerCanSignUp).to.be.a('boolean');
            expect(data.learnerCanSignUp).to.be(false);
            expect(data.learnerCanDeleteAccount).to.be.a('boolean');
            expect(data.learnerCanDeleteAccount).to.be(false);
            expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
            expect(data.learnerCanLoginWithNoPassword).to.be(false);
            expect(data.showDownloadButtonInLearn).to.be.a('boolean');
            expect(data.showDownloadButtonInLearn).to.be(false);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.registered).to.be.a('boolean');
            expect(data.registered).to.be(false);
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetRead', function() {
        it('should call apiAuthFacilitydatasetRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthFacilitydatasetRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityDataset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.learnerCanEditUsername).to.be.a('boolean');
            expect(data.learnerCanEditUsername).to.be(false);
            expect(data.learnerCanEditName).to.be.a('boolean');
            expect(data.learnerCanEditName).to.be(false);
            expect(data.learnerCanEditPassword).to.be.a('boolean');
            expect(data.learnerCanEditPassword).to.be(false);
            expect(data.learnerCanSignUp).to.be.a('boolean');
            expect(data.learnerCanSignUp).to.be(false);
            expect(data.learnerCanDeleteAccount).to.be.a('boolean');
            expect(data.learnerCanDeleteAccount).to.be(false);
            expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
            expect(data.learnerCanLoginWithNoPassword).to.be(false);
            expect(data.showDownloadButtonInLearn).to.be.a('boolean');
            expect(data.showDownloadButtonInLearn).to.be(false);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.registered).to.be.a('boolean');
            expect(data.registered).to.be(false);
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetResetsettings', function() {
        it('should call apiAuthFacilitydatasetResetsettings successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetResetsettings call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.FacilityDataset();
          data.learnerCanEditUsername = false;
          data.learnerCanEditName = false;
          data.learnerCanEditPassword = false;
          data.learnerCanSignUp = false;
          data.learnerCanDeleteAccount = false;
          data.learnerCanLoginWithNoPassword = false;
          data.showDownloadButtonInLearn = false;
          data.description = "";
          data.location = "";
          data.registered = false;
          data.preset = "formal";

          instance.apiAuthFacilitydatasetResetsettings(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityDataset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.learnerCanEditUsername).to.be.a('boolean');
            expect(data.learnerCanEditUsername).to.be(false);
            expect(data.learnerCanEditName).to.be.a('boolean');
            expect(data.learnerCanEditName).to.be(false);
            expect(data.learnerCanEditPassword).to.be.a('boolean');
            expect(data.learnerCanEditPassword).to.be(false);
            expect(data.learnerCanSignUp).to.be.a('boolean');
            expect(data.learnerCanSignUp).to.be(false);
            expect(data.learnerCanDeleteAccount).to.be.a('boolean');
            expect(data.learnerCanDeleteAccount).to.be(false);
            expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
            expect(data.learnerCanLoginWithNoPassword).to.be(false);
            expect(data.showDownloadButtonInLearn).to.be.a('boolean');
            expect(data.showDownloadButtonInLearn).to.be(false);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.registered).to.be.a('boolean');
            expect(data.registered).to.be(false);
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilitydatasetUpdate', function() {
        it('should call apiAuthFacilitydatasetUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilitydatasetUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.FacilityDataset();
          data.learnerCanEditUsername = false;
          data.learnerCanEditName = false;
          data.learnerCanEditPassword = false;
          data.learnerCanSignUp = false;
          data.learnerCanDeleteAccount = false;
          data.learnerCanLoginWithNoPassword = false;
          data.showDownloadButtonInLearn = false;
          data.description = "";
          data.location = "";
          data.registered = false;
          data.preset = "formal";

          instance.apiAuthFacilitydatasetUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityDataset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.learnerCanEditUsername).to.be.a('boolean');
            expect(data.learnerCanEditUsername).to.be(false);
            expect(data.learnerCanEditName).to.be.a('boolean');
            expect(data.learnerCanEditName).to.be(false);
            expect(data.learnerCanEditPassword).to.be.a('boolean');
            expect(data.learnerCanEditPassword).to.be(false);
            expect(data.learnerCanSignUp).to.be.a('boolean');
            expect(data.learnerCanSignUp).to.be(false);
            expect(data.learnerCanDeleteAccount).to.be.a('boolean');
            expect(data.learnerCanDeleteAccount).to.be(false);
            expect(data.learnerCanLoginWithNoPassword).to.be.a('boolean');
            expect(data.learnerCanLoginWithNoPassword).to.be(false);
            expect(data.showDownloadButtonInLearn).to.be.a('boolean');
            expect(data.showDownloadButtonInLearn).to.be(false);
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.location).to.be.a('string');
            expect(data.location).to.be("");
            expect(data.registered).to.be.a('boolean');
            expect(data.registered).to.be(false);
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserCreate', function() {
        it('should call apiAuthFacilityuserCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserCreate call and complete the assertions
          /*
          var data = new KolibriApi.FacilityUser();
          data.username = "";
          data.fullName = "";
          data.password = "";
          data.facility = "";
          data.idNumber = "";
          data.gender = "MALE";
          data.birthYear = "";

          instance.apiAuthFacilityuserCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityUser);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.fullName).to.be.a('string');
            expect(data.fullName).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.facility).to.be.a('string');
            expect(data.facility).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Role);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("admin");
                expect(data.collection).to.be.a('string');
                expect(data.collection).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
              }
            }
            expect(data.isSuperuser).to.be.a('string');
            expect(data.isSuperuser).to.be("");
            expect(data.idNumber).to.be.a('string');
            expect(data.idNumber).to.be("");
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("MALE");
            expect(data.birthYear).to.be.a('string');
            expect(data.birthYear).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserDelete', function() {
        it('should call apiAuthFacilityuserDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserDelete call
          /*
          var id = "id_example";

          instance.apiAuthFacilityuserDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserList', function() {
        it('should call apiAuthFacilityuserList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserList call and complete the assertions
          /*
          var opts = {};
          opts.memberOf = "memberOf_example";

          instance.apiAuthFacilityuserList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.FacilityUser);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.username).to.be.a('string');
              expect(data.username).to.be("");
              expect(data.fullName).to.be.a('string');
              expect(data.fullName).to.be("");
              expect(data.password).to.be.a('string');
              expect(data.password).to.be("");
              expect(data.facility).to.be.a('string');
              expect(data.facility).to.be("");
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(KolibriApi.Role);
                  expect(data.id).to.be.a('string');
                  expect(data.id).to.be("");
                  expect(data.kind).to.be.a('string');
                  expect(data.kind).to.be("admin");
                  expect(data.collection).to.be.a('string');
                  expect(data.collection).to.be("");
                  expect(data.user).to.be.a('string');
                  expect(data.user).to.be("");
                }
              }
              expect(data.isSuperuser).to.be.a('string');
              expect(data.isSuperuser).to.be("");
              expect(data.idNumber).to.be.a('string');
              expect(data.idNumber).to.be("");
              expect(data.gender).to.be.a('string');
              expect(data.gender).to.be("MALE");
              expect(data.birthYear).to.be.a('string');
              expect(data.birthYear).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserPartialUpdate', function() {
        it('should call apiAuthFacilityuserPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.FacilityUser();
          data.username = "";
          data.fullName = "";
          data.password = "";
          data.facility = "";
          data.idNumber = "";
          data.gender = "MALE";
          data.birthYear = "";

          instance.apiAuthFacilityuserPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityUser);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.fullName).to.be.a('string');
            expect(data.fullName).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.facility).to.be.a('string');
            expect(data.facility).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Role);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("admin");
                expect(data.collection).to.be.a('string');
                expect(data.collection).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
              }
            }
            expect(data.isSuperuser).to.be.a('string');
            expect(data.isSuperuser).to.be("");
            expect(data.idNumber).to.be.a('string');
            expect(data.idNumber).to.be("");
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("MALE");
            expect(data.birthYear).to.be.a('string');
            expect(data.birthYear).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserRead', function() {
        it('should call apiAuthFacilityuserRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthFacilityuserRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityUser);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.fullName).to.be.a('string');
            expect(data.fullName).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.facility).to.be.a('string');
            expect(data.facility).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Role);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("admin");
                expect(data.collection).to.be.a('string');
                expect(data.collection).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
              }
            }
            expect(data.isSuperuser).to.be.a('string');
            expect(data.isSuperuser).to.be("");
            expect(data.idNumber).to.be.a('string');
            expect(data.idNumber).to.be("");
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("MALE");
            expect(data.birthYear).to.be.a('string');
            expect(data.birthYear).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityuserUpdate', function() {
        it('should call apiAuthFacilityuserUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityuserUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.FacilityUser();
          data.username = "";
          data.fullName = "";
          data.password = "";
          data.facility = "";
          data.idNumber = "";
          data.gender = "MALE";
          data.birthYear = "";

          instance.apiAuthFacilityuserUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.FacilityUser);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.fullName).to.be.a('string');
            expect(data.fullName).to.be("");
            expect(data.password).to.be.a('string');
            expect(data.password).to.be("");
            expect(data.facility).to.be.a('string');
            expect(data.facility).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Role);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("admin");
                expect(data.collection).to.be.a('string');
                expect(data.collection).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
              }
            }
            expect(data.isSuperuser).to.be.a('string');
            expect(data.isSuperuser).to.be("");
            expect(data.idNumber).to.be.a('string');
            expect(data.idNumber).to.be("");
            expect(data.gender).to.be.a('string');
            expect(data.gender).to.be("MALE");
            expect(data.birthYear).to.be.a('string');
            expect(data.birthYear).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityusernameList', function() {
        it('should call apiAuthFacilityusernameList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityusernameList call and complete the assertions
          /*
          var opts = {};
          opts.search = "search_example";

          instance.apiAuthFacilityusernameList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(Object);
              // expect(data).to.be(null);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthFacilityusernameRead', function() {
        it('should call apiAuthFacilityusernameRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthFacilityusernameRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthFacilityusernameRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupCreate', function() {
        it('should call apiAuthLearnergroupCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupCreate call and complete the assertions
          /*
          var data = new KolibriApi.LearnerGroup();
          data.name = "";
          data.parent = "";

          instance.apiAuthLearnergroupCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.LearnerGroup);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupDelete', function() {
        it('should call apiAuthLearnergroupDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupDelete call
          /*
          var id = "id_example";

          instance.apiAuthLearnergroupDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupList', function() {
        it('should call apiAuthLearnergroupList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupList call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";

          instance.apiAuthLearnergroupList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.LearnerGroup);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.parent).to.be.a('string');
              expect(data.parent).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupPartialUpdate', function() {
        it('should call apiAuthLearnergroupPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.LearnerGroup();
          data.name = "";
          data.parent = "";

          instance.apiAuthLearnergroupPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.LearnerGroup);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupRead', function() {
        it('should call apiAuthLearnergroupRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthLearnergroupRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.LearnerGroup);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthLearnergroupUpdate', function() {
        it('should call apiAuthLearnergroupUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthLearnergroupUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.LearnerGroup();
          data.name = "";
          data.parent = "";

          instance.apiAuthLearnergroupUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.LearnerGroup);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipCreate', function() {
        it('should call apiAuthMembershipCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipCreate call and complete the assertions
          /*
          var data = new KolibriApi.Membership();
          data.collection = "";
          data.user = "";

          instance.apiAuthMembershipCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Membership);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipDelete', function() {
        it('should call apiAuthMembershipDelete successfully', function(done) {
          // TODO: uncomment apiAuthMembershipDelete call
          /*

          instance.apiAuthMembershipDelete(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipDelete_0', function() {
        it('should call apiAuthMembershipDelete_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipDelete_0 call
          /*
          var id = "id_example";

          instance.apiAuthMembershipDelete_0(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipList', function() {
        it('should call apiAuthMembershipList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipList call and complete the assertions
          /*
          var opts = {};
          opts.user = "user_example";
          opts.collection = "collection_example";
          opts.userIds = "userIds_example";

          instance.apiAuthMembershipList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Membership);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.collection).to.be.a('string');
              expect(data.collection).to.be("");
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipPartialUpdate', function() {
        it('should call apiAuthMembershipPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Membership();
          data.collection = "";
          data.user = "";

          instance.apiAuthMembershipPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Membership);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipRead', function() {
        it('should call apiAuthMembershipRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthMembershipRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Membership);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthMembershipUpdate', function() {
        it('should call apiAuthMembershipUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthMembershipUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Membership();
          data.collection = "";
          data.user = "";

          instance.apiAuthMembershipUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Membership);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthPortalRegister', function() {
        it('should call apiAuthPortalRegister successfully', function(done) {
          // TODO: uncomment apiAuthPortalRegister call
          /*

          instance.apiAuthPortalRegister(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthPortalValidateToken', function() {
        it('should call apiAuthPortalValidateToken successfully', function(done) {
          // TODO: uncomment apiAuthPortalValidateToken call
          /*

          instance.apiAuthPortalValidateToken(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleCreate', function() {
        it('should call apiAuthRoleCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRoleCreate call and complete the assertions
          /*
          var data = new KolibriApi.Role();
          data.kind = "admin";
          data.collection = "";
          data.user = "";

          instance.apiAuthRoleCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Role);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("admin");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleDelete', function() {
        it('should call apiAuthRoleDelete successfully', function(done) {
          // TODO: uncomment apiAuthRoleDelete call
          /*

          instance.apiAuthRoleDelete(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleDelete_0', function() {
        it('should call apiAuthRoleDelete_0 successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRoleDelete_0 call
          /*
          var id = "id_example";

          instance.apiAuthRoleDelete_0(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleList', function() {
        it('should call apiAuthRoleList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRoleList call and complete the assertions
          /*
          var opts = {};
          opts.user = "user_example";
          opts.collection = "collection_example";
          opts.kind = "kind_example";
          opts.userIds = "userIds_example";

          instance.apiAuthRoleList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Role);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.kind).to.be.a('string');
              expect(data.kind).to.be("admin");
              expect(data.collection).to.be.a('string');
              expect(data.collection).to.be("");
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRolePartialUpdate', function() {
        it('should call apiAuthRolePartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRolePartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Role();
          data.kind = "admin";
          data.collection = "";
          data.user = "";

          instance.apiAuthRolePartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Role);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("admin");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleRead', function() {
        it('should call apiAuthRoleRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRoleRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiAuthRoleRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Role);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("admin");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthRoleUpdate', function() {
        it('should call apiAuthRoleUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthRoleUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Role();
          data.kind = "admin";
          data.collection = "";
          data.user = "";

          instance.apiAuthRoleUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Role);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("admin");
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthSessionCreate', function() {
        it('should call apiAuthSessionCreate successfully', function(done) {
          // TODO: uncomment apiAuthSessionCreate call
          /*

          instance.apiAuthSessionCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthSessionDelete', function() {
        it('should call apiAuthSessionDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthSessionDelete call
          /*
          var id = "id_example";

          instance.apiAuthSessionDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthSessionUpdate', function() {
        it('should call apiAuthSessionUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiAuthSessionUpdate call
          /*
          var id = "id_example";

          instance.apiAuthSessionUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthSetnonspecifiedpasswordCreate', function() {
        it('should call apiAuthSetnonspecifiedpasswordCreate successfully', function(done) {
          // TODO: uncomment apiAuthSetnonspecifiedpasswordCreate call
          /*

          instance.apiAuthSetnonspecifiedpasswordCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthSignupCreate', function() {
        it('should call apiAuthSignupCreate successfully', function(done) {
          // TODO: uncomment apiAuthSignupCreate call
          /*

          instance.apiAuthSignupCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiAuthUsernameexistsList', function() {
        it('should call apiAuthUsernameexistsList successfully', function(done) {
          // TODO: uncomment apiAuthUsernameexistsList call
          /*

          instance.apiAuthUsernameexistsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksCreate', function() {
        it('should call apiBookmarksBookmarksCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksCreate call and complete the assertions
          /*
          var data = new KolibriApi.Bookmarks();
          data.contentnodeId = "";
          data.user = "";

          instance.apiBookmarksBookmarksCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Bookmarks);
            expect(data.contentnodeId).to.be.a('string');
            expect(data.contentnodeId).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksDelete', function() {
        it('should call apiBookmarksBookmarksDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksDelete call
          /*
          var id = "id_example";

          instance.apiBookmarksBookmarksDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksList', function() {
        it('should call apiBookmarksBookmarksList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksList call and complete the assertions
          /*
          var opts = {};
          opts.contentnodeId = "contentnodeId_example";

          instance.apiBookmarksBookmarksList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Bookmarks);
              expect(data.contentnodeId).to.be.a('string');
              expect(data.contentnodeId).to.be("");
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksPartialUpdate', function() {
        it('should call apiBookmarksBookmarksPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Bookmarks();
          data.contentnodeId = "";
          data.user = "";

          instance.apiBookmarksBookmarksPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Bookmarks);
            expect(data.contentnodeId).to.be.a('string');
            expect(data.contentnodeId).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksRead', function() {
        it('should call apiBookmarksBookmarksRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiBookmarksBookmarksRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Bookmarks);
            expect(data.contentnodeId).to.be.a('string');
            expect(data.contentnodeId).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiBookmarksBookmarksUpdate', function() {
        it('should call apiBookmarksBookmarksUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiBookmarksBookmarksUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Bookmarks();
          data.contentnodeId = "";
          data.user = "";

          instance.apiBookmarksBookmarksUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Bookmarks);
            expect(data.contentnodeId).to.be.a('string');
            expect(data.contentnodeId).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentChannelFilterOptions', function() {
        it('should call apiContentChannelFilterOptions successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentChannelFilterOptions call and complete the assertions
          /*
          var opts = {};
          opts.available = "available_example";
          opts.hasExercise = "hasExercise_example";

          instance.apiContentChannelFilterOptions(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.ChannelMetadataViewSet);
              expect(data.author).to.be.a('string');
              expect(data.author).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.tagline).to.be.a('string');
              expect(data.tagline).to.be("");
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.lastUpdated).to.be.a('string');
              expect(data.lastUpdated).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.root).to.be.a('string');
              expect(data.root).to.be("");
              expect(data.thumbnail).to.be.a('string');
              expect(data.thumbnail).to.be("");
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data._public).to.be.a('boolean');
              expect(data._public).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentChannelList', function() {
        it('should call apiContentChannelList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentChannelList call and complete the assertions
          /*
          var opts = {};
          opts.available = "available_example";
          opts.hasExercise = "hasExercise_example";

          instance.apiContentChannelList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.ChannelMetadataViewSet);
              expect(data.author).to.be.a('string');
              expect(data.author).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.tagline).to.be.a('string');
              expect(data.tagline).to.be("");
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.lastUpdated).to.be.a('string');
              expect(data.lastUpdated).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.root).to.be.a('string');
              expect(data.root).to.be("");
              expect(data.thumbnail).to.be.a('string');
              expect(data.thumbnail).to.be("");
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data._public).to.be.a('boolean');
              expect(data._public).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentChannelRead', function() {
        it('should call apiContentChannelRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentChannelRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentChannelRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ChannelMetadataViewSet);
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tagline).to.be.a('string');
            expect(data.tagline).to.be("");
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.lastUpdated).to.be.a('string');
            expect(data.lastUpdated).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.root).to.be.a('string');
            expect(data.root).to.be("");
            expect(data.thumbnail).to.be.a('string');
            expect(data.thumbnail).to.be("");
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data._public).to.be.a('boolean');
            expect(data._public).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeBookmarksList', function() {
        it('should call apiContentContentnodeBookmarksList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeBookmarksList call and complete the assertions
          /*
          var opts = {};
          opts.kind = "kind_example";
          opts.available = "available_example";
          opts.limit = 56;
          opts.offset = 56;

          instance.apiContentContentnodeBookmarksList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2001);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeBookmarksViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeCopies', function() {
        it('should call apiContentContentnodeCopies successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeCopies call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeCopies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeCopiesCount', function() {
        it('should call apiContentContentnodeCopiesCount successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeCopiesCount call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeCopiesCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeDescendants', function() {
        it('should call apiContentContentnodeDescendants successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeDescendants call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeDescendants(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeDescendantsAssessments', function() {
        it('should call apiContentContentnodeDescendantsAssessments successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeDescendantsAssessments call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeDescendantsAssessments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeGranularRead', function() {
        it('should call apiContentContentnodeGranularRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeGranularRead call
          /*
          var id = "id_example";

          instance.apiContentContentnodeGranularRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeList', function() {
        it('should call apiContentContentnodeList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeList call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeNextContent', function() {
        it('should call apiContentContentnodeNextContent successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeNextContent call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeNextContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeNextSteps', function() {
        it('should call apiContentContentnodeNextSteps successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeNextSteps call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeNextSteps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeNodeAssessments', function() {
        it('should call apiContentContentnodeNodeAssessments successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeNodeAssessments call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeNodeAssessments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodePopular', function() {
        it('should call apiContentContentnodePopular successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodePopular call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodePopular(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeRandom', function() {
        it('should call apiContentContentnodeRandom successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeRandom call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeRandom(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeRead', function() {
        it('should call apiContentContentnodeRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeRecommendationsFor', function() {
        it('should call apiContentContentnodeRecommendationsFor successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeRecommendationsFor call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeRecommendationsFor(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeResume', function() {
        it('should call apiContentContentnodeResume successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeResume call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeResume(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchCopies', function() {
        it('should call apiContentContentnodeSearchCopies successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchCopies call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeSearchCopies(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchCopiesCount', function() {
        it('should call apiContentContentnodeSearchCopiesCount successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchCopiesCount call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchCopiesCount(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchDescendants', function() {
        it('should call apiContentContentnodeSearchDescendants successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchDescendants call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchDescendants(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchDescendantsAssessments', function() {
        it('should call apiContentContentnodeSearchDescendantsAssessments successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchDescendantsAssessments call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchDescendantsAssessments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchList', function() {
        it('should call apiContentContentnodeSearchList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchList call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchNextContent', function() {
        it('should call apiContentContentnodeSearchNextContent successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchNextContent call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeSearchNextContent(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchNextSteps', function() {
        it('should call apiContentContentnodeSearchNextSteps successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchNextSteps call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchNextSteps(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchNodeAssessments', function() {
        it('should call apiContentContentnodeSearchNodeAssessments successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchNodeAssessments call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchNodeAssessments(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchPopular', function() {
        it('should call apiContentContentnodeSearchPopular successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchPopular call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchPopular(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchRandom', function() {
        it('should call apiContentContentnodeSearchRandom successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchRandom call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchRandom(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchRead', function() {
        it('should call apiContentContentnodeSearchRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeSearchRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchRecommendationsFor', function() {
        it('should call apiContentContentnodeSearchRecommendationsFor successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchRecommendationsFor call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeSearchRecommendationsFor(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeSearchResume', function() {
        it('should call apiContentContentnodeSearchResume successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeSearchResume call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeSearchResume(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse200);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.ContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeTreeRead', function() {
        it('should call apiContentContentnodeTreeRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeTreeRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentContentnodeTreeRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.ContentNodeTreeViewset);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.available).to.be.a('boolean');
            expect(data.available).to.be(false);
            expect(data.channelId).to.be.a('string');
            expect(data.channelId).to.be("");
            expect(data.coachContent).to.be.a('boolean');
            expect(data.coachContent).to.be(false);
            expect(data.contentId).to.be.a('string');
            expect(data.contentId).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.kind).to.be.a('string');
            expect(data.kind).to.be("topic");
            expect(data.langId).to.be.a('string');
            expect(data.langId).to.be("");
            expect(data.licenseDescription).to.be.a('string');
            expect(data.licenseDescription).to.be("");
            expect(data.licenseName).to.be.a('string');
            expect(data.licenseName).to.be("");
            expect(data.licenseOwner).to.be.a('string');
            expect(data.licenseOwner).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data.options).to.be.a('string');
            expect(data.options).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.sortOrder).to.be.a('number');
            expect(data.sortOrder).to.be();
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.lft).to.be.a('number');
            expect(data.lft).to.be(0);
            expect(data.rght).to.be.a('number');
            expect(data.rght).to.be(0);
            expect(data.treeId).to.be.a('number');
            expect(data.treeId).to.be(0);
            expect(data.learningActivities).to.be.a('string');
            expect(data.learningActivities).to.be("");
            expect(data.gradeLevels).to.be.a('string');
            expect(data.gradeLevels).to.be("");
            expect(data.resourceTypes).to.be.a('string');
            expect(data.resourceTypes).to.be("");
            expect(data.accessibilityLabels).to.be.a('string');
            expect(data.accessibilityLabels).to.be("");
            expect(data.categories).to.be.a('string');
            expect(data.categories).to.be("");
            expect(data.duration).to.be.a('number');
            expect(data.duration).to.be(0);
            expect(data.ancestors).to.be.a('string');
            expect(data.ancestors).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeprogressList', function() {
        it('should call apiContentContentnodeprogressList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeprogressList call
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.resume = "resume_example";
          opts.lesson = "lesson_example";
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentContentnodeprogressList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentContentnodeprogressTree', function() {
        it('should call apiContentContentnodeprogressTree successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentContentnodeprogressTree call
          /*
          var id = "id_example";

          instance.apiContentContentnodeprogressTree(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentFileList', function() {
        it('should call apiContentFileList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentFileList call and complete the assertions
          /*
          var opts = {};
          opts.page = 56;
          opts.pageSize = 56;

          instance.apiContentFileList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2002);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(File);
                expect(data).to.be();
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentFileRead', function() {
        it('should call apiContentFileRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentFileRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiContentFileRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(File);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentRemotechannelKolibriStudioStatus', function() {
        it('should call apiContentRemotechannelKolibriStudioStatus successfully', function(done) {
          // TODO: uncomment apiContentRemotechannelKolibriStudioStatus call
          /*

          instance.apiContentRemotechannelKolibriStudioStatus(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentRemotechannelList', function() {
        it('should call apiContentRemotechannelList successfully', function(done) {
          // TODO: uncomment apiContentRemotechannelList call
          /*

          instance.apiContentRemotechannelList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentRemotechannelRead', function() {
        it('should call apiContentRemotechannelRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentRemotechannelRead call
          /*
          var id = "id_example";

          instance.apiContentRemotechannelRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentRemotechannelRetrieveList', function() {
        it('should call apiContentRemotechannelRetrieveList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentRemotechannelRetrieveList call
          /*
          var id = "id_example";

          instance.apiContentRemotechannelRetrieveList(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiContentUsercontentnodeList', function() {
        it('should call apiContentUsercontentnodeList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiContentUsercontentnodeList call and complete the assertions
          /*
          var opts = {};
          opts.parent = "parent_example";
          opts.parentIsnull = "parentIsnull_example";
          opts.prerequisiteFor = "prerequisiteFor_example";
          opts.hasPrerequisite = "hasPrerequisite_example";
          opts.related = "related_example";
          opts.excludeContentIds = "excludeContentIds_example";
          opts.ids = "ids_example";
          opts.contentId = "contentId_example";
          opts.channelId = "channelId_example";
          opts.kind = "kind_example";
          opts.includeCoachContent = "includeCoachContent_example";
          opts.kindIn = "kindIn_example";
          opts.containsQuiz = "containsQuiz_example";
          opts.gradeLevels = "gradeLevels_example";
          opts.resourceTypes = "resourceTypes_example";
          opts.learningActivities = "learningActivities_example";
          opts.accessibilityLabels = "accessibilityLabels_example";
          opts.categories = "categories_example";
          opts.learnerNeeds = "learnerNeeds_example";
          opts.keywords = "keywords_example";
          opts.channels = "channels_example";
          opts.languages = "languages_example";
          opts.treeId = 8.14;
          opts.lftGt = 8.14;
          opts.rghtLt = 8.14;
          opts.resume = "resume_example";
          opts.lesson = "lesson_example";
          opts.categoriesIsnull = "categoriesIsnull_example";
          opts.authors = "authors_example";
          opts.tags = "tags_example";
          opts.descendantOf = "descendantOf_example";
          opts.cursor = "cursor_example";
          opts.maxResults = 56;

          instance.apiContentUsercontentnodeList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2003);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.UserContentNodeViewset);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.author).to.be.a('string');
                expect(data.author).to.be("");
                expect(data.available).to.be.a('boolean');
                expect(data.available).to.be(false);
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("");
                expect(data.coachContent).to.be.a('boolean');
                expect(data.coachContent).to.be(false);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("");
                expect(data.description).to.be.a('string');
                expect(data.description).to.be("");
                expect(data.kind).to.be.a('string');
                expect(data.kind).to.be("topic");
                expect(data.langId).to.be.a('string');
                expect(data.langId).to.be("");
                expect(data.licenseDescription).to.be.a('string');
                expect(data.licenseDescription).to.be("");
                expect(data.licenseName).to.be.a('string');
                expect(data.licenseName).to.be("");
                expect(data.licenseOwner).to.be.a('string');
                expect(data.licenseOwner).to.be("");
                expect(data.numCoachContents).to.be.a('number');
                expect(data.numCoachContents).to.be(0);
                expect(data.options).to.be.a('string');
                expect(data.options).to.be("");
                expect(data.parent).to.be.a('string');
                expect(data.parent).to.be("");
                expect(data.sortOrder).to.be.a('number');
                expect(data.sortOrder).to.be();
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.lft).to.be.a('number');
                expect(data.lft).to.be(0);
                expect(data.rght).to.be.a('number');
                expect(data.rght).to.be(0);
                expect(data.treeId).to.be.a('number');
                expect(data.treeId).to.be(0);
                expect(data.learningActivities).to.be.a('string');
                expect(data.learningActivities).to.be("");
                expect(data.gradeLevels).to.be.a('string');
                expect(data.gradeLevels).to.be("");
                expect(data.resourceTypes).to.be.a('string');
                expect(data.resourceTypes).to.be("");
                expect(data.accessibilityLabels).to.be.a('string');
                expect(data.accessibilityLabels).to.be("");
                expect(data.categories).to.be.a('string');
                expect(data.categories).to.be("");
                expect(data.duration).to.be.a('number');
                expect(data.duration).to.be(0);
                expect(data.ancestors).to.be.a('string');
                expect(data.ancestors).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDeviceinfoList', function() {
        it('should call apiDeviceDeviceinfoList successfully', function(done) {
          // TODO: uncomment apiDeviceDeviceinfoList call
          /*

          instance.apiDeviceDeviceinfoList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicenameList', function() {
        it('should call apiDeviceDevicenameList successfully', function(done) {
          // TODO: uncomment apiDeviceDevicenameList call
          /*

          instance.apiDeviceDevicenameList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicenamePartialUpdate', function() {
        it('should call apiDeviceDevicenamePartialUpdate successfully', function(done) {
          // TODO: uncomment apiDeviceDevicenamePartialUpdate call
          /*

          instance.apiDeviceDevicenamePartialUpdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsCreate', function() {
        it('should call apiDeviceDevicepermissionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDevicepermissionsCreate call and complete the assertions
          /*
          var data = new KolibriApi.DevicePermissions();
          data.user = "";
          data.isSuperuser = false;
          data.canManageContent = false;

          instance.apiDeviceDevicepermissionsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DevicePermissions);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.isSuperuser).to.be.a('boolean');
            expect(data.isSuperuser).to.be(false);
            expect(data.canManageContent).to.be.a('boolean');
            expect(data.canManageContent).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsDelete', function() {
        it('should call apiDeviceDevicepermissionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDevicepermissionsDelete call
          /*
          var user = "user_example";

          instance.apiDeviceDevicepermissionsDelete(user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsList', function() {
        it('should call apiDeviceDevicepermissionsList successfully', function(done) {
          // TODO: uncomment apiDeviceDevicepermissionsList call and complete the assertions
          /*

          instance.apiDeviceDevicepermissionsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.DevicePermissions);
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
              expect(data.isSuperuser).to.be.a('boolean');
              expect(data.isSuperuser).to.be(false);
              expect(data.canManageContent).to.be.a('boolean');
              expect(data.canManageContent).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsPartialUpdate', function() {
        it('should call apiDeviceDevicepermissionsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDevicepermissionsPartialUpdate call and complete the assertions
          /*
          var user = "user_example";
          var data = new KolibriApi.DevicePermissions();
          data.user = "";
          data.isSuperuser = false;
          data.canManageContent = false;

          instance.apiDeviceDevicepermissionsPartialUpdate(user, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DevicePermissions);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.isSuperuser).to.be.a('boolean');
            expect(data.isSuperuser).to.be(false);
            expect(data.canManageContent).to.be.a('boolean');
            expect(data.canManageContent).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsRead', function() {
        it('should call apiDeviceDevicepermissionsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDevicepermissionsRead call and complete the assertions
          /*
          var user = "user_example";

          instance.apiDeviceDevicepermissionsRead(user, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DevicePermissions);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.isSuperuser).to.be.a('boolean');
            expect(data.isSuperuser).to.be(false);
            expect(data.canManageContent).to.be.a('boolean');
            expect(data.canManageContent).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicepermissionsUpdate', function() {
        it('should call apiDeviceDevicepermissionsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDevicepermissionsUpdate call and complete the assertions
          /*
          var user = "user_example";
          var data = new KolibriApi.DevicePermissions();
          data.user = "";
          data.isSuperuser = false;
          data.canManageContent = false;

          instance.apiDeviceDevicepermissionsUpdate(user, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DevicePermissions);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.isSuperuser).to.be.a('boolean');
            expect(data.isSuperuser).to.be(false);
            expect(data.canManageContent).to.be.a('boolean');
            expect(data.canManageContent).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDeviceprovisionCreate', function() {
        it('should call apiDeviceDeviceprovisionCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceDeviceprovisionCreate call and complete the assertions
          /*
          var data = new KolibriApi.DeviceProvision();
          data.facility = new KolibriApi.Facility();
          data.facility.name = "";
          data.preset = "formal";
          data.superuser = new KolibriApi.NoFacilityFacilityUser();
          data.superuser.username = "";
          data.superuser.fullName = "";
          data.superuser.password = "";
          data.languageId = "";
          data.deviceName = "";
          data.settings = ;
          data.allowGuestAccess = false;

          instance.apiDeviceDeviceprovisionCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DeviceProvision);
            expect(data.facility).to.be.a(KolibriApi.Facility);
                  expect(data.facility.id).to.be.a('string');
              expect(data.facility.id).to.be("");
              expect(data.facility.name).to.be.a('string');
              expect(data.facility.name).to.be("");
            expect(data.preset).to.be.a('string');
            expect(data.preset).to.be("formal");
            expect(data.superuser).to.be.a(KolibriApi.NoFacilityFacilityUser);
                  expect(data.superuser.username).to.be.a('string');
              expect(data.superuser.username).to.be("");
              expect(data.superuser.fullName).to.be.a('string');
              expect(data.superuser.fullName).to.be("");
              expect(data.superuser.password).to.be.a('string');
              expect(data.superuser.password).to.be("");
            expect(data.languageId).to.be.a('string');
            expect(data.languageId).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.settings).to.be.a(Object);
            expect(data.settings).to.be();
            expect(data.allowGuestAccess).to.be.a('boolean');
            expect(data.allowGuestAccess).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicesettingsList', function() {
        it('should call apiDeviceDevicesettingsList successfully', function(done) {
          // TODO: uncomment apiDeviceDevicesettingsList call
          /*

          instance.apiDeviceDevicesettingsList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceDevicesettingsPartialUpdate', function() {
        it('should call apiDeviceDevicesettingsPartialUpdate successfully', function(done) {
          // TODO: uncomment apiDeviceDevicesettingsPartialUpdate call
          /*

          instance.apiDeviceDevicesettingsPartialUpdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceFreespaceList', function() {
        it('should call apiDeviceFreespaceList successfully', function(done) {
          // TODO: uncomment apiDeviceFreespaceList call
          /*

          instance.apiDeviceFreespaceList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceUsersyncstatusList', function() {
        it('should call apiDeviceUsersyncstatusList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceUsersyncstatusList call and complete the assertions
          /*
          var opts = {};
          opts.user = "user_example";
          opts.memberOf = "memberOf_example";

          instance.apiDeviceUsersyncstatusList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.UserSyncStatusViewSet);
              expect(data.queued).to.be.a('boolean');
              expect(data.queued).to.be(false);
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDeviceUsersyncstatusRead', function() {
        it('should call apiDeviceUsersyncstatusRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDeviceUsersyncstatusRead call and complete the assertions
          /*
          var id = 56;

          instance.apiDeviceUsersyncstatusRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.UserSyncStatusViewSet);
            expect(data.queued).to.be.a('boolean');
            expect(data.queued).to.be(false);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationCreate', function() {
        it('should call apiDiscoveryDynamicnetworklocationCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationCreate call and complete the assertions
          /*
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryDynamicnetworklocationCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationDelete', function() {
        it('should call apiDiscoveryDynamicnetworklocationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationDelete call
          /*
          var id = "id_example";

          instance.apiDiscoveryDynamicnetworklocationDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationList', function() {
        it('should call apiDiscoveryDynamicnetworklocationList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationList call and complete the assertions
          /*
          var opts = {};
          opts.subsetOfUsersDevice = "subsetOfUsersDevice_example";

          instance.apiDiscoveryDynamicnetworklocationList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.NetworkLocation);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.available).to.be.a('string');
              expect(data.available).to.be("");
              expect(data.dynamic).to.be.a('boolean');
              expect(data.dynamic).to.be(false);
              expect(data.nickname).to.be.a('string');
              expect(data.nickname).to.be("");
              expect(data.baseUrl).to.be.a('string');
              expect(data.baseUrl).to.be("");
              expect(data.deviceName).to.be.a('string');
              expect(data.deviceName).to.be("");
              expect(data.instanceId).to.be.a('string');
              expect(data.instanceId).to.be("");
              expect(data.added).to.be.a(Date);
              expect(data.added).to.be(new Date());
              expect(data.lastAccessed).to.be.a(Date);
              expect(data.lastAccessed).to.be(new Date());
              expect(data.operatingSystem).to.be.a('string');
              expect(data.operatingSystem).to.be("");
              expect(data.application).to.be.a('string');
              expect(data.application).to.be("");
              expect(data.kolibriVersion).to.be.a('string');
              expect(data.kolibriVersion).to.be("");
              expect(data.subsetOfUsersDevice).to.be.a('boolean');
              expect(data.subsetOfUsersDevice).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationPartialUpdate', function() {
        it('should call apiDiscoveryDynamicnetworklocationPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryDynamicnetworklocationPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationRead', function() {
        it('should call apiDiscoveryDynamicnetworklocationRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiDiscoveryDynamicnetworklocationRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryDynamicnetworklocationUpdate', function() {
        it('should call apiDiscoveryDynamicnetworklocationUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryDynamicnetworklocationUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryDynamicnetworklocationUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationCreate', function() {
        it('should call apiDiscoveryNetworklocationCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationCreate call and complete the assertions
          /*
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryNetworklocationCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationDelete', function() {
        it('should call apiDiscoveryNetworklocationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationDelete call
          /*
          var id = "id_example";

          instance.apiDiscoveryNetworklocationDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationFacilitiesRead', function() {
        it('should call apiDiscoveryNetworklocationFacilitiesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationFacilitiesRead call
          /*
          var id = "id_example";

          instance.apiDiscoveryNetworklocationFacilitiesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationList', function() {
        it('should call apiDiscoveryNetworklocationList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationList call and complete the assertions
          /*
          var opts = {};
          opts.subsetOfUsersDevice = "subsetOfUsersDevice_example";

          instance.apiDiscoveryNetworklocationList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.NetworkLocation);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.available).to.be.a('string');
              expect(data.available).to.be("");
              expect(data.dynamic).to.be.a('boolean');
              expect(data.dynamic).to.be(false);
              expect(data.nickname).to.be.a('string');
              expect(data.nickname).to.be("");
              expect(data.baseUrl).to.be.a('string');
              expect(data.baseUrl).to.be("");
              expect(data.deviceName).to.be.a('string');
              expect(data.deviceName).to.be("");
              expect(data.instanceId).to.be.a('string');
              expect(data.instanceId).to.be("");
              expect(data.added).to.be.a(Date);
              expect(data.added).to.be(new Date());
              expect(data.lastAccessed).to.be.a(Date);
              expect(data.lastAccessed).to.be(new Date());
              expect(data.operatingSystem).to.be.a('string');
              expect(data.operatingSystem).to.be("");
              expect(data.application).to.be.a('string');
              expect(data.application).to.be("");
              expect(data.kolibriVersion).to.be.a('string');
              expect(data.kolibriVersion).to.be("");
              expect(data.subsetOfUsersDevice).to.be.a('boolean');
              expect(data.subsetOfUsersDevice).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationPartialUpdate', function() {
        it('should call apiDiscoveryNetworklocationPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryNetworklocationPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationRead', function() {
        it('should call apiDiscoveryNetworklocationRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiDiscoveryNetworklocationRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryNetworklocationUpdate', function() {
        it('should call apiDiscoveryNetworklocationUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryNetworklocationUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryNetworklocationUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationCreate', function() {
        it('should call apiDiscoveryStaticnetworklocationCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationCreate call and complete the assertions
          /*
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryStaticnetworklocationCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationDelete', function() {
        it('should call apiDiscoveryStaticnetworklocationDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationDelete call
          /*
          var id = "id_example";

          instance.apiDiscoveryStaticnetworklocationDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationList', function() {
        it('should call apiDiscoveryStaticnetworklocationList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationList call and complete the assertions
          /*
          var opts = {};
          opts.subsetOfUsersDevice = "subsetOfUsersDevice_example";

          instance.apiDiscoveryStaticnetworklocationList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.NetworkLocation);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.available).to.be.a('string');
              expect(data.available).to.be("");
              expect(data.dynamic).to.be.a('boolean');
              expect(data.dynamic).to.be(false);
              expect(data.nickname).to.be.a('string');
              expect(data.nickname).to.be("");
              expect(data.baseUrl).to.be.a('string');
              expect(data.baseUrl).to.be("");
              expect(data.deviceName).to.be.a('string');
              expect(data.deviceName).to.be("");
              expect(data.instanceId).to.be.a('string');
              expect(data.instanceId).to.be("");
              expect(data.added).to.be.a(Date);
              expect(data.added).to.be(new Date());
              expect(data.lastAccessed).to.be.a(Date);
              expect(data.lastAccessed).to.be(new Date());
              expect(data.operatingSystem).to.be.a('string');
              expect(data.operatingSystem).to.be("");
              expect(data.application).to.be.a('string');
              expect(data.application).to.be("");
              expect(data.kolibriVersion).to.be.a('string');
              expect(data.kolibriVersion).to.be("");
              expect(data.subsetOfUsersDevice).to.be.a('boolean');
              expect(data.subsetOfUsersDevice).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationPartialUpdate', function() {
        it('should call apiDiscoveryStaticnetworklocationPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryStaticnetworklocationPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationRead', function() {
        it('should call apiDiscoveryStaticnetworklocationRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiDiscoveryStaticnetworklocationRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiDiscoveryStaticnetworklocationUpdate', function() {
        it('should call apiDiscoveryStaticnetworklocationUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiDiscoveryStaticnetworklocationUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.NetworkLocation();
          data.nickname = "";
          data.baseUrl = "";

          instance.apiDiscoveryStaticnetworklocationUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.NetworkLocation);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.dynamic).to.be.a('boolean');
            expect(data.dynamic).to.be(false);
            expect(data.nickname).to.be.a('string');
            expect(data.nickname).to.be("");
            expect(data.baseUrl).to.be.a('string');
            expect(data.baseUrl).to.be("");
            expect(data.deviceName).to.be.a('string');
            expect(data.deviceName).to.be("");
            expect(data.instanceId).to.be.a('string');
            expect(data.instanceId).to.be("");
            expect(data.added).to.be.a(Date);
            expect(data.added).to.be(new Date());
            expect(data.lastAccessed).to.be.a(Date);
            expect(data.lastAccessed).to.be(new Date());
            expect(data.operatingSystem).to.be.a('string');
            expect(data.operatingSystem).to.be("");
            expect(data.application).to.be.a('string');
            expect(data.application).to.be("");
            expect(data.kolibriVersion).to.be.a('string');
            expect(data.kolibriVersion).to.be("");
            expect(data.subsetOfUsersDevice).to.be.a('boolean');
            expect(data.subsetOfUsersDevice).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamCreate', function() {
        it('should call apiExamsExamCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamCreate call and complete the assertions
          /*
          var data = new KolibriApi.Exam();
          data.title = "";
          data.questionCount = 0;
          data.questionSources = [new KolibriApi.QuestionSource()];
          data.questionSources[0].exerciseId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].questionId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].title = "";
          data.questionSources[0].counterInExercise = 0;
          data.seed = 0;
          data.active = false;
          data.collection = "";
          data.archive = false;
          data.dateArchived = new Date();
          data.dateActivated = new Date();
          data.assignments = [""];
          data.creator = "";
          data.learnersSeeFixedOrder = false;
          data.learnerIds = [""];

          instance.apiExamsExamCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Exam);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.questionCount).to.be.a('number');
            expect(data.questionCount).to.be(0);
            {
              let dataCtr = data.questionSources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.QuestionSource);
                expect(data.exerciseId).to.be.a('string');
                expect(data.exerciseId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.questionId).to.be.a('string');
                expect(data.questionId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.counterInExercise).to.be.a('number');
                expect(data.counterInExercise).to.be(0);
              }
            }
            expect(data.seed).to.be.a('number');
            expect(data.seed).to.be(0);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.archive).to.be.a('boolean');
            expect(data.archive).to.be(false);
            expect(data.dateArchived).to.be.a(Date);
            expect(data.dateArchived).to.be(new Date());
            expect(data.dateActivated).to.be.a(Date);
            expect(data.dateActivated).to.be(new Date());
            {
              let dataCtr = data.assignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("");
            expect(data.dataModelVersion).to.be.a('number');
            expect(data.dataModelVersion).to.be(0);
            expect(data.learnersSeeFixedOrder).to.be.a('boolean');
            expect(data.learnersSeeFixedOrder).to.be(false);
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamDelete', function() {
        it('should call apiExamsExamDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamDelete call
          /*
          var id = "id_example";

          instance.apiExamsExamDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamList', function() {
        it('should call apiExamsExamList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamList call and complete the assertions
          /*
          var opts = {};
          opts.collection = "collection_example";
          opts.page = 56;
          opts.pageSize = 56;

          instance.apiExamsExamList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2004);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Exam);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.questionCount).to.be.a('number');
                expect(data.questionCount).to.be(0);
                {
                  let dataCtr = data.questionSources;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(KolibriApi.QuestionSource);
                    expect(data.exerciseId).to.be.a('string');
                    expect(data.exerciseId).to.be("""00000000-0000-0000-0000-000000000000");
                    expect(data.questionId).to.be.a('string');
                    expect(data.questionId).to.be("""00000000-0000-0000-0000-000000000000");
                    expect(data.title).to.be.a('string');
                    expect(data.title).to.be("");
                    expect(data.counterInExercise).to.be.a('number');
                    expect(data.counterInExercise).to.be(0);
                  }
                }
                expect(data.seed).to.be.a('number');
                expect(data.seed).to.be(0);
                expect(data.active).to.be.a('boolean');
                expect(data.active).to.be(false);
                expect(data.collection).to.be.a('string');
                expect(data.collection).to.be("");
                expect(data.archive).to.be.a('boolean');
                expect(data.archive).to.be(false);
                expect(data.dateArchived).to.be.a(Date);
                expect(data.dateArchived).to.be(new Date());
                expect(data.dateActivated).to.be.a(Date);
                expect(data.dateActivated).to.be(new Date());
                {
                  let dataCtr = data.assignments;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
                expect(data.creator).to.be.a('string');
                expect(data.creator).to.be("");
                expect(data.dataModelVersion).to.be.a('number');
                expect(data.dataModelVersion).to.be(0);
                expect(data.learnersSeeFixedOrder).to.be.a('boolean');
                expect(data.learnersSeeFixedOrder).to.be(false);
                {
                  let dataCtr = data.learnerIds;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a('string');
                    expect(data).to.be("");
                  }
                }
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamPartialUpdate', function() {
        it('should call apiExamsExamPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Exam();
          data.title = "";
          data.questionCount = 0;
          data.questionSources = [new KolibriApi.QuestionSource()];
          data.questionSources[0].exerciseId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].questionId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].title = "";
          data.questionSources[0].counterInExercise = 0;
          data.seed = 0;
          data.active = false;
          data.collection = "";
          data.archive = false;
          data.dateArchived = new Date();
          data.dateActivated = new Date();
          data.assignments = [""];
          data.creator = "";
          data.learnersSeeFixedOrder = false;
          data.learnerIds = [""];

          instance.apiExamsExamPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Exam);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.questionCount).to.be.a('number');
            expect(data.questionCount).to.be(0);
            {
              let dataCtr = data.questionSources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.QuestionSource);
                expect(data.exerciseId).to.be.a('string');
                expect(data.exerciseId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.questionId).to.be.a('string');
                expect(data.questionId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.counterInExercise).to.be.a('number');
                expect(data.counterInExercise).to.be(0);
              }
            }
            expect(data.seed).to.be.a('number');
            expect(data.seed).to.be(0);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.archive).to.be.a('boolean');
            expect(data.archive).to.be(false);
            expect(data.dateArchived).to.be.a(Date);
            expect(data.dateArchived).to.be(new Date());
            expect(data.dateActivated).to.be.a(Date);
            expect(data.dateActivated).to.be(new Date());
            {
              let dataCtr = data.assignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("");
            expect(data.dataModelVersion).to.be.a('number');
            expect(data.dataModelVersion).to.be(0);
            expect(data.learnersSeeFixedOrder).to.be.a('boolean');
            expect(data.learnersSeeFixedOrder).to.be(false);
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamRead', function() {
        it('should call apiExamsExamRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiExamsExamRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Exam);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.questionCount).to.be.a('number');
            expect(data.questionCount).to.be(0);
            {
              let dataCtr = data.questionSources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.QuestionSource);
                expect(data.exerciseId).to.be.a('string');
                expect(data.exerciseId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.questionId).to.be.a('string');
                expect(data.questionId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.counterInExercise).to.be.a('number');
                expect(data.counterInExercise).to.be(0);
              }
            }
            expect(data.seed).to.be.a('number');
            expect(data.seed).to.be(0);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.archive).to.be.a('boolean');
            expect(data.archive).to.be(false);
            expect(data.dateArchived).to.be.a(Date);
            expect(data.dateArchived).to.be(new Date());
            expect(data.dateActivated).to.be.a(Date);
            expect(data.dateActivated).to.be(new Date());
            {
              let dataCtr = data.assignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("");
            expect(data.dataModelVersion).to.be.a('number');
            expect(data.dataModelVersion).to.be(0);
            expect(data.learnersSeeFixedOrder).to.be.a('boolean');
            expect(data.learnersSeeFixedOrder).to.be(false);
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiExamsExamUpdate', function() {
        it('should call apiExamsExamUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiExamsExamUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Exam();
          data.title = "";
          data.questionCount = 0;
          data.questionSources = [new KolibriApi.QuestionSource()];
          data.questionSources[0].exerciseId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].questionId = """00000000-0000-0000-0000-000000000000";
          data.questionSources[0].title = "";
          data.questionSources[0].counterInExercise = 0;
          data.seed = 0;
          data.active = false;
          data.collection = "";
          data.archive = false;
          data.dateArchived = new Date();
          data.dateActivated = new Date();
          data.assignments = [""];
          data.creator = "";
          data.learnersSeeFixedOrder = false;
          data.learnerIds = [""];

          instance.apiExamsExamUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Exam);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.questionCount).to.be.a('number');
            expect(data.questionCount).to.be(0);
            {
              let dataCtr = data.questionSources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.QuestionSource);
                expect(data.exerciseId).to.be.a('string');
                expect(data.exerciseId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.questionId).to.be.a('string');
                expect(data.questionId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.title).to.be.a('string');
                expect(data.title).to.be("");
                expect(data.counterInExercise).to.be.a('number');
                expect(data.counterInExercise).to.be(0);
              }
            }
            expect(data.seed).to.be.a('number');
            expect(data.seed).to.be(0);
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            expect(data.archive).to.be.a('boolean');
            expect(data.archive).to.be(false);
            expect(data.dateArchived).to.be.a(Date);
            expect(data.dateArchived).to.be(new Date());
            expect(data.dateActivated).to.be.a(Date);
            expect(data.dateActivated).to.be(new Date());
            {
              let dataCtr = data.assignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.creator).to.be.a('string');
            expect(data.creator).to.be("");
            expect(data.dataModelVersion).to.be.a('number');
            expect(data.dataModelVersion).to.be(0);
            expect(data.learnersSeeFixedOrder).to.be.a('boolean');
            expect(data.learnersSeeFixedOrder).to.be(false);
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonCreate', function() {
        it('should call apiLessonsLessonCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonCreate call and complete the assertions
          /*
          var data = new KolibriApi.Lesson();
          data.title = "";
          data.description = "";
          data.resources = [new KolibriApi.Resource()];
          data.resources[0].contentId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].channelId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].contentnodeId = """00000000-0000-0000-0000-000000000000";
          data.isActive = false;
          data.collection = "";
          data.lessonAssignments = [""];
          data.learnerIds = [""];
          data.createdBy = "";

          instance.apiLessonsLessonCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Lesson);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Resource);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.contentnodeId).to.be.a('string');
                expect(data.contentnodeId).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            {
              let dataCtr = data.lessonAssignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonDelete', function() {
        it('should call apiLessonsLessonDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonDelete call
          /*
          var id = "id_example";

          instance.apiLessonsLessonDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonList', function() {
        it('should call apiLessonsLessonList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonList call and complete the assertions
          /*
          var opts = {};
          opts.collection = "collection_example";

          instance.apiLessonsLessonList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Lesson);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              {
                let dataCtr = data.resources;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a(KolibriApi.Resource);
                  expect(data.contentId).to.be.a('string');
                  expect(data.contentId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.channelId).to.be.a('string');
                  expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
                  expect(data.contentnodeId).to.be.a('string');
                  expect(data.contentnodeId).to.be("""00000000-0000-0000-0000-000000000000");
                }
              }
              expect(data.isActive).to.be.a('boolean');
              expect(data.isActive).to.be(false);
              expect(data.collection).to.be.a('string');
              expect(data.collection).to.be("");
              {
                let dataCtr = data.lessonAssignments;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              {
                let dataCtr = data.learnerIds;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.createdBy).to.be.a('string');
              expect(data.createdBy).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonPartialUpdate', function() {
        it('should call apiLessonsLessonPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Lesson();
          data.title = "";
          data.description = "";
          data.resources = [new KolibriApi.Resource()];
          data.resources[0].contentId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].channelId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].contentnodeId = """00000000-0000-0000-0000-000000000000";
          data.isActive = false;
          data.collection = "";
          data.lessonAssignments = [""];
          data.learnerIds = [""];
          data.createdBy = "";

          instance.apiLessonsLessonPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Lesson);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Resource);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.contentnodeId).to.be.a('string');
                expect(data.contentnodeId).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            {
              let dataCtr = data.lessonAssignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonRead', function() {
        it('should call apiLessonsLessonRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiLessonsLessonRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Lesson);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Resource);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.contentnodeId).to.be.a('string');
                expect(data.contentnodeId).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            {
              let dataCtr = data.lessonAssignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLessonsLessonUpdate', function() {
        it('should call apiLessonsLessonUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLessonsLessonUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.Lesson();
          data.title = "";
          data.description = "";
          data.resources = [new KolibriApi.Resource()];
          data.resources[0].contentId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].channelId = """00000000-0000-0000-0000-000000000000";
          data.resources[0].contentnodeId = """00000000-0000-0000-0000-000000000000";
          data.isActive = false;
          data.collection = "";
          data.lessonAssignments = [""];
          data.learnerIds = [""];
          data.createdBy = "";

          instance.apiLessonsLessonUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Lesson);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.title).to.be.a('string');
            expect(data.title).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            {
              let dataCtr = data.resources;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Resource);
                expect(data.contentId).to.be.a('string');
                expect(data.contentId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.channelId).to.be.a('string');
                expect(data.channelId).to.be("""00000000-0000-0000-0000-000000000000");
                expect(data.contentnodeId).to.be.a('string');
                expect(data.contentnodeId).to.be("""00000000-0000-0000-0000-000000000000");
              }
            }
            expect(data.isActive).to.be.a('boolean');
            expect(data.isActive).to.be(false);
            expect(data.collection).to.be.a('string');
            expect(data.collection).to.be("");
            {
              let dataCtr = data.lessonAssignments;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.learnerIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.createdBy).to.be.a('string');
            expect(data.createdBy).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerAttemptlogList', function() {
        it('should call apiLoggerAttemptlogList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerAttemptlogList call and complete the assertions
          /*
          var opts = {};
          opts.masterylog = "masterylog_example";
          opts.complete = "complete_example";
          opts.user = "user_example";
          opts.content = "content_example";
          opts.item = "item_example";
          opts.facility = "facility_example";
          opts.classroom = "classroom_example";
          opts.learnerGroup = "learnerGroup_example";
          opts.ordering = "ordering_example";
          opts.page = 56;
          opts.pageSize = 56;

          instance.apiLoggerAttemptlogList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2005);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.AttemptLogViewSet);
                expect(data.id).to.be.a('string');
                expect(data.id).to.be("");
                expect(data.item).to.be.a('string');
                expect(data.item).to.be("");
                expect(data.startTimestamp).to.be.a('string');
                expect(data.startTimestamp).to.be("");
                expect(data.endTimestamp).to.be.a('string');
                expect(data.endTimestamp).to.be("");
                expect(data.completionTimestamp).to.be.a('string');
                expect(data.completionTimestamp).to.be("");
                expect(data.timeSpent).to.be.a('number');
                expect(data.timeSpent).to.be();
                expect(data.complete).to.be.a('boolean');
                expect(data.complete).to.be(false);
                expect(data.correct).to.be.a('number');
                expect(data.correct).to.be();
                expect(data.hinted).to.be.a('boolean');
                expect(data.hinted).to.be(false);
                expect(data.answer).to.be.a('string');
                expect(data.answer).to.be("");
                expect(data.simpleAnswer).to.be.a('string');
                expect(data.simpleAnswer).to.be("");
                expect(data.interactionHistory).to.be.a('string');
                expect(data.interactionHistory).to.be("");
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.error).to.be.a('boolean');
                expect(data.error).to.be(false);
                expect(data.masterylog).to.be.a('string');
                expect(data.masterylog).to.be("");
                expect(data.sessionlog).to.be.a('string');
                expect(data.sessionlog).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerAttemptlogRead', function() {
        it('should call apiLoggerAttemptlogRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerAttemptlogRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiLoggerAttemptlogRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.AttemptLogViewSet);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.item).to.be.a('string');
            expect(data.item).to.be("");
            expect(data.startTimestamp).to.be.a('string');
            expect(data.startTimestamp).to.be("");
            expect(data.endTimestamp).to.be.a('string');
            expect(data.endTimestamp).to.be("");
            expect(data.completionTimestamp).to.be.a('string');
            expect(data.completionTimestamp).to.be("");
            expect(data.timeSpent).to.be.a('number');
            expect(data.timeSpent).to.be();
            expect(data.complete).to.be.a('boolean');
            expect(data.complete).to.be(false);
            expect(data.correct).to.be.a('number');
            expect(data.correct).to.be();
            expect(data.hinted).to.be.a('boolean');
            expect(data.hinted).to.be(false);
            expect(data.answer).to.be.a('string');
            expect(data.answer).to.be("");
            expect(data.simpleAnswer).to.be.a('string');
            expect(data.simpleAnswer).to.be("");
            expect(data.interactionHistory).to.be.a('string');
            expect(data.interactionHistory).to.be("");
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.error).to.be.a('boolean');
            expect(data.error).to.be(false);
            expect(data.masterylog).to.be.a('string');
            expect(data.masterylog).to.be("");
            expect(data.sessionlog).to.be.a('string');
            expect(data.sessionlog).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerMasterylogList', function() {
        it('should call apiLoggerMasterylogList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerMasterylogList call and complete the assertions
          /*
          var opts = {};
          opts.content = "content_example";
          opts.facility = "facility_example";
          opts.classroom = "classroom_example";
          opts.learnerGroup = "learnerGroup_example";
          opts.page = 56;
          opts.pageSize = 56;

          instance.apiLoggerMasterylogList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2006);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.MasteryLogViewSet);
                expect(data.user).to.be.a('string');
                expect(data.user).to.be("");
                expect(data.summarylog).to.be.a('string');
                expect(data.summarylog).to.be("");
                expect(data.masteryCriterion).to.be.a('string');
                expect(data.masteryCriterion).to.be("");
                expect(data.startTimestamp).to.be.a('string');
                expect(data.startTimestamp).to.be("");
                expect(data.endTimestamp).to.be.a('string');
                expect(data.endTimestamp).to.be("");
                expect(data.completionTimestamp).to.be.a('string');
                expect(data.completionTimestamp).to.be("");
                expect(data.masteryLevel).to.be.a('number');
                expect(data.masteryLevel).to.be(0);
                expect(data.complete).to.be.a('boolean');
                expect(data.complete).to.be(false);
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerMasterylogRead', function() {
        it('should call apiLoggerMasterylogRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerMasterylogRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiLoggerMasterylogRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.MasteryLogViewSet);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.summarylog).to.be.a('string');
            expect(data.summarylog).to.be("");
            expect(data.masteryCriterion).to.be.a('string');
            expect(data.masteryCriterion).to.be("");
            expect(data.startTimestamp).to.be.a('string');
            expect(data.startTimestamp).to.be("");
            expect(data.endTimestamp).to.be.a('string');
            expect(data.endTimestamp).to.be("");
            expect(data.completionTimestamp).to.be.a('string');
            expect(data.completionTimestamp).to.be("");
            expect(data.masteryLevel).to.be.a('number');
            expect(data.masteryLevel).to.be(0);
            expect(data.complete).to.be.a('boolean');
            expect(data.complete).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerTrackprogressCreate', function() {
        it('should call apiLoggerTrackprogressCreate successfully', function(done) {
          // TODO: uncomment apiLoggerTrackprogressCreate call
          /*

          instance.apiLoggerTrackprogressCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerTrackprogressUpdate', function() {
        it('should call apiLoggerTrackprogressUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerTrackprogressUpdate call
          /*
          var id = "id_example";

          instance.apiLoggerTrackprogressUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiLoggerUserprogressRead', function() {
        it('should call apiLoggerUserprogressRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiLoggerUserprogressRead call
          /*
          var id = "id_example";

          instance.apiLoggerUserprogressRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1BuffersCreate', function() {
        it('should call apiMorangoV1BuffersCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1BuffersCreate call and complete the assertions
          /*
          var data = new KolibriApi.Buffer();
          data.rmcbList = [new KolibriApi.RecordMaxCounterBuffer()];

          instance.apiMorangoV1BuffersCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Buffer);
            expect(data.serialized).to.be.a('string');
            expect(data.serialized).to.be("");
            expect(data.deleted).to.be.a('boolean');
            expect(data.deleted).to.be(false);
            expect(data.lastSavedInstance).to.be.a('string');
            expect(data.lastSavedInstance).to.be("");
            expect(data.lastSavedCounter).to.be.a('number');
            expect(data.lastSavedCounter).to.be(0);
            expect(data.hardDeleted).to.be.a('boolean');
            expect(data.hardDeleted).to.be(false);
            expect(data.partition).to.be.a('string');
            expect(data.partition).to.be("");
            expect(data.sourceId).to.be.a('string');
            expect(data.sourceId).to.be("");
            expect(data.modelName).to.be.a('string');
            expect(data.modelName).to.be("");
            expect(data.conflictingSerializedData).to.be.a('string');
            expect(data.conflictingSerializedData).to.be("");
            expect(data.modelUuid).to.be.a('string');
            expect(data.modelUuid).to.be("");
            expect(data.transferSession).to.be.a('string');
            expect(data.transferSession).to.be("");
            expect(data.profile).to.be.a('string');
            expect(data.profile).to.be("");
            {
              let dataCtr = data.rmcbList;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.RecordMaxCounterBuffer);
                expect(data.transferSession).to.be.a('string');
                expect(data.transferSession).to.be("");
                expect(data.modelUuid).to.be.a('string');
                expect(data.modelUuid).to.be("");
                expect(data.instanceId).to.be.a('string');
                expect(data.instanceId).to.be("");
                expect(data.counter).to.be.a('number');
                expect(data.counter).to.be(0);
              }
            }
            expect(data.selfRefFk).to.be.a('string');
            expect(data.selfRefFk).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1BuffersList', function() {
        it('should call apiMorangoV1BuffersList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1BuffersList call and complete the assertions
          /*
          var opts = {};
          opts.limit = 56;
          opts.offset = 56;

          instance.apiMorangoV1BuffersList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.InlineResponse2007);
            expect(data.count).to.be.a('number');
            expect(data.count).to.be(0);
            expect(data.next).to.be.a('string');
            expect(data.next).to.be("");
            expect(data.previous).to.be.a('string');
            expect(data.previous).to.be("");
            {
              let dataCtr = data.results;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a(KolibriApi.Buffer);
                expect(data.serialized).to.be.a('string');
                expect(data.serialized).to.be("");
                expect(data.deleted).to.be.a('boolean');
                expect(data.deleted).to.be(false);
                expect(data.lastSavedInstance).to.be.a('string');
                expect(data.lastSavedInstance).to.be("");
                expect(data.lastSavedCounter).to.be.a('number');
                expect(data.lastSavedCounter).to.be(0);
                expect(data.hardDeleted).to.be.a('boolean');
                expect(data.hardDeleted).to.be(false);
                expect(data.partition).to.be.a('string');
                expect(data.partition).to.be("");
                expect(data.sourceId).to.be.a('string');
                expect(data.sourceId).to.be("");
                expect(data.modelName).to.be.a('string');
                expect(data.modelName).to.be("");
                expect(data.conflictingSerializedData).to.be.a('string');
                expect(data.conflictingSerializedData).to.be("");
                expect(data.modelUuid).to.be.a('string');
                expect(data.modelUuid).to.be("");
                expect(data.transferSession).to.be.a('string');
                expect(data.transferSession).to.be("");
                expect(data.profile).to.be.a('string');
                expect(data.profile).to.be("");
                {
                  let dataCtr = data.rmcbList;
                  expect(dataCtr).to.be.an(Array);
                  expect(dataCtr).to.not.be.empty();
                  for (let p in dataCtr) {
                    let data = dataCtr[p];
                    expect(data).to.be.a(KolibriApi.RecordMaxCounterBuffer);
                    expect(data.transferSession).to.be.a('string');
                    expect(data.transferSession).to.be("");
                    expect(data.modelUuid).to.be.a('string');
                    expect(data.modelUuid).to.be("");
                    expect(data.instanceId).to.be.a('string');
                    expect(data.instanceId).to.be("");
                    expect(data.counter).to.be.a('number');
                    expect(data.counter).to.be(0);
                  }
                }
                expect(data.selfRefFk).to.be.a('string');
                expect(data.selfRefFk).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1CertificatechainCreate', function() {
        it('should call apiMorangoV1CertificatechainCreate successfully', function(done) {
          // TODO: uncomment apiMorangoV1CertificatechainCreate call
          /*

          instance.apiMorangoV1CertificatechainCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1CertificatesCreate', function() {
        it('should call apiMorangoV1CertificatesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1CertificatesCreate call and complete the assertions
          /*
          var data = new KolibriApi.Certificate();
          data.parent = "";
          data.profile = "";
          data.scopeDefinition = "";
          data.scopeVersion = 0;
          data.scopeParams = "";
          data.publicKey = "";

          instance.apiMorangoV1CertificatesCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Certificate);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.profile).to.be.a('string');
            expect(data.profile).to.be("");
            expect(data.scopeDefinition).to.be.a('string');
            expect(data.scopeDefinition).to.be("");
            expect(data.scopeVersion).to.be.a('number');
            expect(data.scopeVersion).to.be(0);
            expect(data.scopeParams).to.be.a('string');
            expect(data.scopeParams).to.be("");
            expect(data.publicKey).to.be.a('string');
            expect(data.publicKey).to.be("");
            expect(data.serialized).to.be.a('string');
            expect(data.serialized).to.be("");
            expect(data.signature).to.be.a('string');
            expect(data.signature).to.be("");
            expect(data.salt).to.be.a('string');
            expect(data.salt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1CertificatesList', function() {
        it('should call apiMorangoV1CertificatesList successfully', function(done) {
          // TODO: uncomment apiMorangoV1CertificatesList call and complete the assertions
          /*

          instance.apiMorangoV1CertificatesList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.Certificate);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.parent).to.be.a('string');
              expect(data.parent).to.be("");
              expect(data.profile).to.be.a('string');
              expect(data.profile).to.be("");
              expect(data.scopeDefinition).to.be.a('string');
              expect(data.scopeDefinition).to.be("");
              expect(data.scopeVersion).to.be.a('number');
              expect(data.scopeVersion).to.be(0);
              expect(data.scopeParams).to.be.a('string');
              expect(data.scopeParams).to.be("");
              expect(data.publicKey).to.be.a('string');
              expect(data.publicKey).to.be("");
              expect(data.serialized).to.be.a('string');
              expect(data.serialized).to.be("");
              expect(data.signature).to.be.a('string');
              expect(data.signature).to.be("");
              expect(data.salt).to.be.a('string');
              expect(data.salt).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1CertificatesRead', function() {
        it('should call apiMorangoV1CertificatesRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1CertificatesRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiMorangoV1CertificatesRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Certificate);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.parent).to.be.a('string');
            expect(data.parent).to.be("");
            expect(data.profile).to.be.a('string');
            expect(data.profile).to.be("");
            expect(data.scopeDefinition).to.be.a('string');
            expect(data.scopeDefinition).to.be("");
            expect(data.scopeVersion).to.be.a('number');
            expect(data.scopeVersion).to.be(0);
            expect(data.scopeParams).to.be.a('string');
            expect(data.scopeParams).to.be("");
            expect(data.publicKey).to.be.a('string');
            expect(data.publicKey).to.be("");
            expect(data.serialized).to.be.a('string');
            expect(data.serialized).to.be("");
            expect(data.signature).to.be.a('string');
            expect(data.signature).to.be("");
            expect(data.salt).to.be.a('string');
            expect(data.salt).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1MorangoinfoRead', function() {
        it('should call apiMorangoV1MorangoinfoRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1MorangoinfoRead call
          /*
          var id = "id_example";

          instance.apiMorangoV1MorangoinfoRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1NoncesCreate', function() {
        it('should call apiMorangoV1NoncesCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1NoncesCreate call and complete the assertions
          /*
          var data = new KolibriApi.Nonce();

          instance.apiMorangoV1NoncesCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.Nonce);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.ip).to.be.a('string');
            expect(data.ip).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1PublickeyList', function() {
        it('should call apiMorangoV1PublickeyList successfully', function(done) {
          // TODO: uncomment apiMorangoV1PublickeyList call and complete the assertions
          /*

          instance.apiMorangoV1PublickeyList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.SharedKey);
              expect(data.publicKey).to.be.a('string');
              expect(data.publicKey).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1PublickeyRead', function() {
        it('should call apiMorangoV1PublickeyRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1PublickeyRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiMorangoV1PublickeyRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.SharedKey);
            expect(data.publicKey).to.be.a('string');
            expect(data.publicKey).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1SyncsessionsCreate', function() {
        it('should call apiMorangoV1SyncsessionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1SyncsessionsCreate call and complete the assertions
          /*
          var data = new KolibriApi.SyncSession();

          instance.apiMorangoV1SyncsessionsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.SyncSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.clientCertificate).to.be.a('string');
            expect(data.clientCertificate).to.be("");
            expect(data.serverCertificate).to.be.a('string');
            expect(data.serverCertificate).to.be("");
            expect(data.profile).to.be.a('string');
            expect(data.profile).to.be("");
            expect(data.connectionKind).to.be.a('string');
            expect(data.connectionKind).to.be("network");
            expect(data.connectionPath).to.be.a('string');
            expect(data.connectionPath).to.be("");
            expect(data.clientIp).to.be.a('string');
            expect(data.clientIp).to.be("");
            expect(data.serverIp).to.be.a('string');
            expect(data.serverIp).to.be("");
            expect(data.clientInstance).to.be.a('string');
            expect(data.clientInstance).to.be("");
            expect(data.serverInstance).to.be.a('string');
            expect(data.serverInstance).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1SyncsessionsDelete', function() {
        it('should call apiMorangoV1SyncsessionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1SyncsessionsDelete call
          /*
          var id = "id_example";

          instance.apiMorangoV1SyncsessionsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1SyncsessionsRead', function() {
        it('should call apiMorangoV1SyncsessionsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1SyncsessionsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiMorangoV1SyncsessionsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.SyncSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.clientCertificate).to.be.a('string');
            expect(data.clientCertificate).to.be("");
            expect(data.serverCertificate).to.be.a('string');
            expect(data.serverCertificate).to.be("");
            expect(data.profile).to.be.a('string');
            expect(data.profile).to.be("");
            expect(data.connectionKind).to.be.a('string');
            expect(data.connectionKind).to.be("network");
            expect(data.connectionPath).to.be.a('string');
            expect(data.connectionPath).to.be("");
            expect(data.clientIp).to.be.a('string');
            expect(data.clientIp).to.be("");
            expect(data.serverIp).to.be.a('string');
            expect(data.serverIp).to.be("");
            expect(data.clientInstance).to.be.a('string');
            expect(data.clientInstance).to.be("");
            expect(data.serverInstance).to.be.a('string');
            expect(data.serverInstance).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1TransfersessionsCreate', function() {
        it('should call apiMorangoV1TransfersessionsCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1TransfersessionsCreate call and complete the assertions
          /*
          var data = new KolibriApi.TransferSession();
          data.recordsTransferred = 0;
          data.recordsTotal = 0;
          data.bytesReceived = 0;
          data.bytesSent = 0;

          instance.apiMorangoV1TransfersessionsCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.TransferSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.filter).to.be.a('string');
            expect(data.filter).to.be("");
            expect(data.push).to.be.a('boolean');
            expect(data.push).to.be(false);
            expect(data.recordsTransferred).to.be.a('number');
            expect(data.recordsTransferred).to.be(0);
            expect(data.recordsTotal).to.be.a('number');
            expect(data.recordsTotal).to.be(0);
            expect(data.bytesReceived).to.be.a('number');
            expect(data.bytesReceived).to.be(0);
            expect(data.bytesSent).to.be.a('number');
            expect(data.bytesSent).to.be(0);
            expect(data.syncSession).to.be.a('string');
            expect(data.syncSession).to.be("");
            expect(data.serverFsic).to.be.a('string');
            expect(data.serverFsic).to.be("");
            expect(data.clientFsic).to.be.a('string');
            expect(data.clientFsic).to.be("");
            expect(data.transferStage).to.be.a('string');
            expect(data.transferStage).to.be("initializing");
            expect(data.transferStageStatus).to.be.a('string');
            expect(data.transferStageStatus).to.be("pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1TransfersessionsDelete', function() {
        it('should call apiMorangoV1TransfersessionsDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1TransfersessionsDelete call
          /*
          var id = "id_example";

          instance.apiMorangoV1TransfersessionsDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1TransfersessionsPartialUpdate', function() {
        it('should call apiMorangoV1TransfersessionsPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1TransfersessionsPartialUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.TransferSession();
          data.recordsTransferred = 0;
          data.recordsTotal = 0;
          data.bytesReceived = 0;
          data.bytesSent = 0;

          instance.apiMorangoV1TransfersessionsPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.TransferSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.filter).to.be.a('string');
            expect(data.filter).to.be("");
            expect(data.push).to.be.a('boolean');
            expect(data.push).to.be(false);
            expect(data.recordsTransferred).to.be.a('number');
            expect(data.recordsTransferred).to.be(0);
            expect(data.recordsTotal).to.be.a('number');
            expect(data.recordsTotal).to.be(0);
            expect(data.bytesReceived).to.be.a('number');
            expect(data.bytesReceived).to.be(0);
            expect(data.bytesSent).to.be.a('number');
            expect(data.bytesSent).to.be(0);
            expect(data.syncSession).to.be.a('string');
            expect(data.syncSession).to.be("");
            expect(data.serverFsic).to.be.a('string');
            expect(data.serverFsic).to.be("");
            expect(data.clientFsic).to.be.a('string');
            expect(data.clientFsic).to.be("");
            expect(data.transferStage).to.be.a('string');
            expect(data.transferStage).to.be("initializing");
            expect(data.transferStageStatus).to.be.a('string');
            expect(data.transferStageStatus).to.be("pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1TransfersessionsRead', function() {
        it('should call apiMorangoV1TransfersessionsRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1TransfersessionsRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiMorangoV1TransfersessionsRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.TransferSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.filter).to.be.a('string');
            expect(data.filter).to.be("");
            expect(data.push).to.be.a('boolean');
            expect(data.push).to.be(false);
            expect(data.recordsTransferred).to.be.a('number');
            expect(data.recordsTransferred).to.be(0);
            expect(data.recordsTotal).to.be.a('number');
            expect(data.recordsTotal).to.be(0);
            expect(data.bytesReceived).to.be.a('number');
            expect(data.bytesReceived).to.be(0);
            expect(data.bytesSent).to.be.a('number');
            expect(data.bytesSent).to.be(0);
            expect(data.syncSession).to.be.a('string');
            expect(data.syncSession).to.be("");
            expect(data.serverFsic).to.be.a('string');
            expect(data.serverFsic).to.be("");
            expect(data.clientFsic).to.be.a('string');
            expect(data.clientFsic).to.be("");
            expect(data.transferStage).to.be.a('string');
            expect(data.transferStage).to.be("initializing");
            expect(data.transferStageStatus).to.be.a('string');
            expect(data.transferStageStatus).to.be("pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiMorangoV1TransfersessionsUpdate', function() {
        it('should call apiMorangoV1TransfersessionsUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiMorangoV1TransfersessionsUpdate call and complete the assertions
          /*
          var id = "id_example";
          var data = new KolibriApi.TransferSession();
          data.recordsTransferred = 0;
          data.recordsTotal = 0;
          data.bytesReceived = 0;
          data.bytesSent = 0;

          instance.apiMorangoV1TransfersessionsUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.TransferSession);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.startTimestamp).to.be.a(Date);
            expect(data.startTimestamp).to.be(new Date());
            expect(data.lastActivityTimestamp).to.be.a(Date);
            expect(data.lastActivityTimestamp).to.be(new Date());
            expect(data.active).to.be.a('boolean');
            expect(data.active).to.be(false);
            expect(data.filter).to.be.a('string');
            expect(data.filter).to.be("");
            expect(data.push).to.be.a('boolean');
            expect(data.push).to.be(false);
            expect(data.recordsTransferred).to.be.a('number');
            expect(data.recordsTransferred).to.be(0);
            expect(data.recordsTotal).to.be.a('number');
            expect(data.recordsTotal).to.be(0);
            expect(data.bytesReceived).to.be.a('number');
            expect(data.bytesReceived).to.be(0);
            expect(data.bytesSent).to.be.a('number');
            expect(data.bytesSent).to.be(0);
            expect(data.syncSession).to.be.a('string');
            expect(data.syncSession).to.be("");
            expect(data.serverFsic).to.be.a('string');
            expect(data.serverFsic).to.be("");
            expect(data.clientFsic).to.be.a('string');
            expect(data.clientFsic).to.be("");
            expect(data.transferStage).to.be.a('string');
            expect(data.transferStage).to.be("initializing");
            expect(data.transferStageStatus).to.be.a('string');
            expect(data.transferStageStatus).to.be("pending");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationList', function() {
        it('should call apiNotificationsPingbacknotificationList successfully', function(done) {
          // TODO: uncomment apiNotificationsPingbacknotificationList call and complete the assertions
          /*

          instance.apiNotificationsPingbacknotificationList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.PingbackNotification);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.versionRange).to.be.a('string');
              expect(data.versionRange).to.be("");
              expect(data.timestamp).to.be.a(Date);
              expect(data.timestamp).to.be(new Date());
              expect(data.linkUrl).to.be.a('string');
              expect(data.linkUrl).to.be("");
              expect(data.i18n).to.be.a(Object);
              expect(data.i18n).to.be();
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationRead', function() {
        it('should call apiNotificationsPingbacknotificationRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiNotificationsPingbacknotificationRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PingbackNotification);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.versionRange).to.be.a('string');
            expect(data.versionRange).to.be("");
            expect(data.timestamp).to.be.a(Date);
            expect(data.timestamp).to.be(new Date());
            expect(data.linkUrl).to.be.a('string');
            expect(data.linkUrl).to.be("");
            expect(data.i18n).to.be.a(Object);
            expect(data.i18n).to.be();

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedCreate', function() {
        it('should call apiNotificationsPingbacknotificationdismissedCreate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationdismissedCreate call and complete the assertions
          /*
          var data = new KolibriApi.PingbackNotificationDismissed();
          data.user = "";
          data.notification = "";

          instance.apiNotificationsPingbacknotificationdismissedCreate(data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PingbackNotificationDismissed);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.notification).to.be.a('string');
            expect(data.notification).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedDelete', function() {
        it('should call apiNotificationsPingbacknotificationdismissedDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationdismissedDelete call
          /*
          var id = 56;

          instance.apiNotificationsPingbacknotificationdismissedDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedList', function() {
        it('should call apiNotificationsPingbacknotificationdismissedList successfully', function(done) {
          // TODO: uncomment apiNotificationsPingbacknotificationdismissedList call and complete the assertions
          /*

          instance.apiNotificationsPingbacknotificationdismissedList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.PingbackNotificationDismissed);
              expect(data.user).to.be.a('string');
              expect(data.user).to.be("");
              expect(data.notification).to.be.a('string');
              expect(data.notification).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedPartialUpdate', function() {
        it('should call apiNotificationsPingbacknotificationdismissedPartialUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationdismissedPartialUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new KolibriApi.PingbackNotificationDismissed();
          data.user = "";
          data.notification = "";

          instance.apiNotificationsPingbacknotificationdismissedPartialUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PingbackNotificationDismissed);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.notification).to.be.a('string');
            expect(data.notification).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedRead', function() {
        it('should call apiNotificationsPingbacknotificationdismissedRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationdismissedRead call and complete the assertions
          /*
          var id = 56;

          instance.apiNotificationsPingbacknotificationdismissedRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PingbackNotificationDismissed);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.notification).to.be.a('string');
            expect(data.notification).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiNotificationsPingbacknotificationdismissedUpdate', function() {
        it('should call apiNotificationsPingbacknotificationdismissedUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiNotificationsPingbacknotificationdismissedUpdate call and complete the assertions
          /*
          var id = 56;
          var data = new KolibriApi.PingbackNotificationDismissed();
          data.user = "";
          data.notification = "";

          instance.apiNotificationsPingbacknotificationdismissedUpdate(id, data, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PingbackNotificationDismissed);
            expect(data.user).to.be.a('string');
            expect(data.user).to.be("");
            expect(data.notification).to.be.a('string');
            expect(data.notification).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicChannelsList', function() {
        it('should call apiPublicChannelsList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiPublicChannelsList call
          /*
          var version = "version_example";

          instance.apiPublicChannelsList(version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicChannelsLookupList', function() {
        it('should call apiPublicChannelsLookupList successfully', function(done) {
          // TODO: uncomment, update parameter values for apiPublicChannelsLookupList call
          /*
          var identifier = "identifier_example";
          var version = "version_example";

          instance.apiPublicChannelsLookupList(identifier, version, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicFacilityuserList', function() {
        it('should call apiPublicFacilityuserList successfully', function(done) {
          // TODO: uncomment apiPublicFacilityuserList call and complete the assertions
          /*

          instance.apiPublicFacilityuserList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.PublicFacilityUser);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.username).to.be.a('string');
              expect(data.username).to.be("");
              expect(data.fullName).to.be.a('string');
              expect(data.fullName).to.be("");
              expect(data.facility).to.be.a('string');
              expect(data.facility).to.be("");
              {
                let dataCtr = data.roles;
                expect(dataCtr).to.be.an(Array);
                expect(dataCtr).to.not.be.empty();
                for (let p in dataCtr) {
                  let data = dataCtr[p];
                  expect(data).to.be.a('string');
                  expect(data).to.be("");
                }
              }
              expect(data.isSuperuser).to.be.a('string');
              expect(data.isSuperuser).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicFacilityuserRead', function() {
        it('should call apiPublicFacilityuserRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiPublicFacilityuserRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiPublicFacilityuserRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PublicFacilityUser);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.username).to.be.a('string');
            expect(data.username).to.be("");
            expect(data.fullName).to.be.a('string');
            expect(data.fullName).to.be("");
            expect(data.facility).to.be.a('string');
            expect(data.facility).to.be("");
            {
              let dataCtr = data.roles;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            expect(data.isSuperuser).to.be.a('string');
            expect(data.isSuperuser).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicInfoList', function() {
        it('should call apiPublicInfoList successfully', function(done) {
          // TODO: uncomment apiPublicInfoList call
          /*

          instance.apiPublicInfoList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicSyncqueueCreate', function() {
        it('should call apiPublicSyncqueueCreate successfully', function(done) {
          // TODO: uncomment apiPublicSyncqueueCreate call
          /*

          instance.apiPublicSyncqueueCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicSyncqueueUpdate', function() {
        it('should call apiPublicSyncqueueUpdate successfully', function(done) {
          // TODO: uncomment, update parameter values for apiPublicSyncqueueUpdate call
          /*
          var id = "id_example";

          instance.apiPublicSyncqueueUpdate(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicV1FacilityList', function() {
        it('should call apiPublicV1FacilityList successfully', function(done) {
          // TODO: uncomment apiPublicV1FacilityList call and complete the assertions
          /*

          instance.apiPublicV1FacilityList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.PublicFacility);
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.dataset).to.be.a('string');
              expect(data.dataset).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.learnerCanLoginWithNoPassword).to.be.a('string');
              expect(data.learnerCanLoginWithNoPassword).to.be("");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiPublicV1FacilityRead', function() {
        it('should call apiPublicV1FacilityRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiPublicV1FacilityRead call and complete the assertions
          /*
          var id = "id_example";

          instance.apiPublicV1FacilityRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.PublicFacility);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.dataset).to.be.a('string');
            expect(data.dataset).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.learnerCanLoginWithNoPassword).to.be.a('string');
            expect(data.learnerCanLoginWithNoPassword).to.be("");

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksCanceltask', function() {
        it('should call apiTasksFacilitytasksCanceltask successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksCanceltask call
          /*

          instance.apiTasksFacilitytasksCanceltask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksCleartask', function() {
        it('should call apiTasksFacilitytasksCleartask successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksCleartask call
          /*

          instance.apiTasksFacilitytasksCleartask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksCleartasks', function() {
        it('should call apiTasksFacilitytasksCleartasks successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksCleartasks call
          /*

          instance.apiTasksFacilitytasksCleartasks(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksCreate', function() {
        it('should call apiTasksFacilitytasksCreate successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksCreate call
          /*

          instance.apiTasksFacilitytasksCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksDelete', function() {
        it('should call apiTasksFacilitytasksDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiTasksFacilitytasksDelete call
          /*
          var id = "id_example";

          instance.apiTasksFacilitytasksDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksDeletefinishedtasks', function() {
        it('should call apiTasksFacilitytasksDeletefinishedtasks successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksDeletefinishedtasks call
          /*

          instance.apiTasksFacilitytasksDeletefinishedtasks(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksList', function() {
        it('should call apiTasksFacilitytasksList successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksList call
          /*

          instance.apiTasksFacilitytasksList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksRead', function() {
        it('should call apiTasksFacilitytasksRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiTasksFacilitytasksRead call
          /*
          var id = "id_example";

          instance.apiTasksFacilitytasksRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksRestarttask', function() {
        it('should call apiTasksFacilitytasksRestarttask successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksRestarttask call
          /*

          instance.apiTasksFacilitytasksRestarttask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksStartdataportalbulksync', function() {
        it('should call apiTasksFacilitytasksStartdataportalbulksync successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksStartdataportalbulksync call
          /*

          instance.apiTasksFacilitytasksStartdataportalbulksync(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksStartdataportalsync', function() {
        it('should call apiTasksFacilitytasksStartdataportalsync successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksStartdataportalsync call
          /*

          instance.apiTasksFacilitytasksStartdataportalsync(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksStartdeletefacility', function() {
        it('should call apiTasksFacilitytasksStartdeletefacility successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksStartdeletefacility call
          /*

          instance.apiTasksFacilitytasksStartdeletefacility(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksStartpeerfacilityimport', function() {
        it('should call apiTasksFacilitytasksStartpeerfacilityimport successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksStartpeerfacilityimport call
          /*

          instance.apiTasksFacilitytasksStartpeerfacilityimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksFacilitytasksStartpeerfacilitysync', function() {
        it('should call apiTasksFacilitytasksStartpeerfacilitysync successfully', function(done) {
          // TODO: uncomment apiTasksFacilitytasksStartpeerfacilitysync call
          /*

          instance.apiTasksFacilitytasksStartpeerfacilitysync(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksCanceltask', function() {
        it('should call apiTasksTasksCanceltask successfully', function(done) {
          // TODO: uncomment apiTasksTasksCanceltask call
          /*

          instance.apiTasksTasksCanceltask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksChanneldiffstats', function() {
        it('should call apiTasksTasksChanneldiffstats successfully', function(done) {
          // TODO: uncomment apiTasksTasksChanneldiffstats call
          /*

          instance.apiTasksTasksChanneldiffstats(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksCleartask', function() {
        it('should call apiTasksTasksCleartask successfully', function(done) {
          // TODO: uncomment apiTasksTasksCleartask call
          /*

          instance.apiTasksTasksCleartask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksCleartasks', function() {
        it('should call apiTasksTasksCleartasks successfully', function(done) {
          // TODO: uncomment apiTasksTasksCleartasks call
          /*

          instance.apiTasksTasksCleartasks(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksCreate', function() {
        it('should call apiTasksTasksCreate successfully', function(done) {
          // TODO: uncomment apiTasksTasksCreate call
          /*

          instance.apiTasksTasksCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksDelete', function() {
        it('should call apiTasksTasksDelete successfully', function(done) {
          // TODO: uncomment, update parameter values for apiTasksTasksDelete call
          /*
          var id = "id_example";

          instance.apiTasksTasksDelete(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksDeletefinishedtasks', function() {
        it('should call apiTasksTasksDeletefinishedtasks successfully', function(done) {
          // TODO: uncomment apiTasksTasksDeletefinishedtasks call
          /*

          instance.apiTasksTasksDeletefinishedtasks(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksExportuserstocsv', function() {
        it('should call apiTasksTasksExportuserstocsv successfully', function(done) {
          // TODO: uncomment apiTasksTasksExportuserstocsv call
          /*

          instance.apiTasksTasksExportuserstocsv(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksImportusersfromcsv', function() {
        it('should call apiTasksTasksImportusersfromcsv successfully', function(done) {
          // TODO: uncomment apiTasksTasksImportusersfromcsv call
          /*

          instance.apiTasksTasksImportusersfromcsv(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksList', function() {
        it('should call apiTasksTasksList successfully', function(done) {
          // TODO: uncomment apiTasksTasksList call
          /*

          instance.apiTasksTasksList(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksLocaldrive', function() {
        it('should call apiTasksTasksLocaldrive successfully', function(done) {
          // TODO: uncomment apiTasksTasksLocaldrive call
          /*

          instance.apiTasksTasksLocaldrive(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksRead', function() {
        it('should call apiTasksTasksRead successfully', function(done) {
          // TODO: uncomment, update parameter values for apiTasksTasksRead call
          /*
          var id = "id_example";

          instance.apiTasksTasksRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksRestarttask', function() {
        it('should call apiTasksTasksRestarttask successfully', function(done) {
          // TODO: uncomment apiTasksTasksRestarttask call
          /*

          instance.apiTasksTasksRestarttask(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartbulkdelete', function() {
        it('should call apiTasksTasksStartbulkdelete successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartbulkdelete call
          /*

          instance.apiTasksTasksStartbulkdelete(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartchannelupdate', function() {
        it('should call apiTasksTasksStartchannelupdate successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartchannelupdate call
          /*

          instance.apiTasksTasksStartchannelupdate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdeletechannel', function() {
        it('should call apiTasksTasksStartdeletechannel successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdeletechannel call
          /*

          instance.apiTasksTasksStartdeletechannel(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdiskbulkexport', function() {
        it('should call apiTasksTasksStartdiskbulkexport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdiskbulkexport call
          /*

          instance.apiTasksTasksStartdiskbulkexport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdiskbulkimport', function() {
        it('should call apiTasksTasksStartdiskbulkimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdiskbulkimport call
          /*

          instance.apiTasksTasksStartdiskbulkimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdiskchannelimport', function() {
        it('should call apiTasksTasksStartdiskchannelimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdiskchannelimport call
          /*

          instance.apiTasksTasksStartdiskchannelimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdiskcontentimport', function() {
        it('should call apiTasksTasksStartdiskcontentimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdiskcontentimport call
          /*

          instance.apiTasksTasksStartdiskcontentimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartdiskexport', function() {
        it('should call apiTasksTasksStartdiskexport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartdiskexport call
          /*

          instance.apiTasksTasksStartdiskexport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartexportlogcsv', function() {
        it('should call apiTasksTasksStartexportlogcsv successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartexportlogcsv call
          /*

          instance.apiTasksTasksStartexportlogcsv(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartremotebulkimport', function() {
        it('should call apiTasksTasksStartremotebulkimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartremotebulkimport call
          /*

          instance.apiTasksTasksStartremotebulkimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartremotechannelimport', function() {
        it('should call apiTasksTasksStartremotechannelimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartremotechannelimport call
          /*

          instance.apiTasksTasksStartremotechannelimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('apiTasksTasksStartremotecontentimport', function() {
        it('should call apiTasksTasksStartremotecontentimport successfully', function(done) {
          // TODO: uncomment apiTasksTasksStartremotecontentimport call
          /*

          instance.apiTasksTasksStartremotecontentimport(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
