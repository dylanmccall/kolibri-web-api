/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new KolibriApi.DeviceApi();
  });

  describe('(package)', function() {
    describe('DeviceApi', function() {
      describe('deviceApiDeviceChannelList', function() {
        it('should call deviceApiDeviceChannelList successfully', function(done) {
          // TODO: uncomment, update parameter values for deviceApiDeviceChannelList call and complete the assertions
          /*
          var opts = {};
          opts.available = "available_example";
          opts.hasExercise = "hasExercise_example";

          instance.deviceApiDeviceChannelList(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(KolibriApi.DeviceChannelMetadata);
              expect(data.author).to.be.a('string');
              expect(data.author).to.be("");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("");
              expect(data.tagline).to.be.a('string');
              expect(data.tagline).to.be("");
              expect(data.id).to.be.a('string');
              expect(data.id).to.be("");
              expect(data.lastUpdated).to.be.a('string');
              expect(data.lastUpdated).to.be("");
              expect(data.langCode).to.be.a('string');
              expect(data.langCode).to.be("");
              expect(data.langName).to.be.a('string');
              expect(data.langName).to.be("");
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("");
              expect(data.root).to.be.a('string');
              expect(data.root).to.be("");
              expect(data.thumbnail).to.be.a('string');
              expect(data.thumbnail).to.be("");
              expect(data.version).to.be.a('number');
              expect(data.version).to.be(0);
              expect(data.available).to.be.a('string');
              expect(data.available).to.be("");
              expect(data.numCoachContents).to.be.a('number');
              expect(data.numCoachContents).to.be(0);
              expect(data._public).to.be.a('boolean');
              expect(data._public).to.be(false);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deviceApiDeviceChannelRead', function() {
        it('should call deviceApiDeviceChannelRead successfully', function(done) {
          // TODO: uncomment, update parameter values for deviceApiDeviceChannelRead call and complete the assertions
          /*
          var id = "id_example";

          instance.deviceApiDeviceChannelRead(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(KolibriApi.DeviceChannelMetadata);
            expect(data.author).to.be.a('string');
            expect(data.author).to.be("");
            expect(data.description).to.be.a('string');
            expect(data.description).to.be("");
            expect(data.tagline).to.be.a('string');
            expect(data.tagline).to.be("");
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.lastUpdated).to.be.a('string');
            expect(data.lastUpdated).to.be("");
            expect(data.langCode).to.be.a('string');
            expect(data.langCode).to.be("");
            expect(data.langName).to.be.a('string');
            expect(data.langName).to.be("");
            expect(data.name).to.be.a('string');
            expect(data.name).to.be("");
            expect(data.root).to.be.a('string');
            expect(data.root).to.be("");
            expect(data.thumbnail).to.be.a('string');
            expect(data.thumbnail).to.be("");
            expect(data.version).to.be.a('number');
            expect(data.version).to.be(0);
            expect(data.available).to.be.a('string');
            expect(data.available).to.be("");
            expect(data.numCoachContents).to.be.a('number');
            expect(data.numCoachContents).to.be(0);
            expect(data._public).to.be.a('boolean');
            expect(data._public).to.be(false);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deviceApiDevicechannelorderCreate', function() {
        it('should call deviceApiDevicechannelorderCreate successfully', function(done) {
          // TODO: uncomment deviceApiDevicechannelorderCreate call
          /*

          instance.deviceApiDevicechannelorderCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('deviceApiImportexportsizeviewCreate', function() {
        it('should call deviceApiImportexportsizeviewCreate successfully', function(done) {
          // TODO: uncomment deviceApiImportexportsizeviewCreate call
          /*

          instance.deviceApiImportexportsizeviewCreate(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
