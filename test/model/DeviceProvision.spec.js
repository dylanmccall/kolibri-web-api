/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('DeviceProvision', function() {
      beforeEach(function() {
        instance = new KolibriApi.DeviceProvision();
      });

      it('should create an instance of DeviceProvision', function() {
        // TODO: update the code to test DeviceProvision
        expect(instance).to.be.a(KolibriApi.DeviceProvision);
      });

      it('should have the property facility (base name: "facility")', function() {
        // TODO: update the code to test the property facility
        expect(instance).to.have.property('facility');
        // expect(instance.facility).to.be(expectedValueLiteral);
      });

      it('should have the property preset (base name: "preset")', function() {
        // TODO: update the code to test the property preset
        expect(instance).to.have.property('preset');
        // expect(instance.preset).to.be(expectedValueLiteral);
      });

      it('should have the property superuser (base name: "superuser")', function() {
        // TODO: update the code to test the property superuser
        expect(instance).to.have.property('superuser');
        // expect(instance.superuser).to.be(expectedValueLiteral);
      });

      it('should have the property languageId (base name: "language_id")', function() {
        // TODO: update the code to test the property languageId
        expect(instance).to.have.property('languageId');
        // expect(instance.languageId).to.be(expectedValueLiteral);
      });

      it('should have the property deviceName (base name: "device_name")', function() {
        // TODO: update the code to test the property deviceName
        expect(instance).to.have.property('deviceName');
        // expect(instance.deviceName).to.be(expectedValueLiteral);
      });

      it('should have the property settings (base name: "settings")', function() {
        // TODO: update the code to test the property settings
        expect(instance).to.have.property('settings');
        // expect(instance.settings).to.be(expectedValueLiteral);
      });

      it('should have the property allowGuestAccess (base name: "allow_guest_access")', function() {
        // TODO: update the code to test the property allowGuestAccess
        expect(instance).to.have.property('allowGuestAccess');
        // expect(instance.allowGuestAccess).to.be(expectedValueLiteral);
      });

    });
  });

}));
