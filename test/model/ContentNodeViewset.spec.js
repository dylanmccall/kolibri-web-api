/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('ContentNodeViewset', function() {
      beforeEach(function() {
        instance = new KolibriApi.ContentNodeViewset();
      });

      it('should create an instance of ContentNodeViewset', function() {
        // TODO: update the code to test ContentNodeViewset
        expect(instance).to.be.a(KolibriApi.ContentNodeViewset);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property author (base name: "author")', function() {
        // TODO: update the code to test the property author
        expect(instance).to.have.property('author');
        // expect(instance.author).to.be(expectedValueLiteral);
      });

      it('should have the property available (base name: "available")', function() {
        // TODO: update the code to test the property available
        expect(instance).to.have.property('available');
        // expect(instance.available).to.be(expectedValueLiteral);
      });

      it('should have the property channelId (base name: "channel_id")', function() {
        // TODO: update the code to test the property channelId
        expect(instance).to.have.property('channelId');
        // expect(instance.channelId).to.be(expectedValueLiteral);
      });

      it('should have the property coachContent (base name: "coach_content")', function() {
        // TODO: update the code to test the property coachContent
        expect(instance).to.have.property('coachContent');
        // expect(instance.coachContent).to.be(expectedValueLiteral);
      });

      it('should have the property contentId (base name: "content_id")', function() {
        // TODO: update the code to test the property contentId
        expect(instance).to.have.property('contentId');
        // expect(instance.contentId).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property kind (base name: "kind")', function() {
        // TODO: update the code to test the property kind
        expect(instance).to.have.property('kind');
        // expect(instance.kind).to.be(expectedValueLiteral);
      });

      it('should have the property langId (base name: "lang_id")', function() {
        // TODO: update the code to test the property langId
        expect(instance).to.have.property('langId');
        // expect(instance.langId).to.be(expectedValueLiteral);
      });

      it('should have the property licenseDescription (base name: "license_description")', function() {
        // TODO: update the code to test the property licenseDescription
        expect(instance).to.have.property('licenseDescription');
        // expect(instance.licenseDescription).to.be(expectedValueLiteral);
      });

      it('should have the property licenseName (base name: "license_name")', function() {
        // TODO: update the code to test the property licenseName
        expect(instance).to.have.property('licenseName');
        // expect(instance.licenseName).to.be(expectedValueLiteral);
      });

      it('should have the property licenseOwner (base name: "license_owner")', function() {
        // TODO: update the code to test the property licenseOwner
        expect(instance).to.have.property('licenseOwner');
        // expect(instance.licenseOwner).to.be(expectedValueLiteral);
      });

      it('should have the property numCoachContents (base name: "num_coach_contents")', function() {
        // TODO: update the code to test the property numCoachContents
        expect(instance).to.have.property('numCoachContents');
        // expect(instance.numCoachContents).to.be(expectedValueLiteral);
      });

      it('should have the property options (base name: "options")', function() {
        // TODO: update the code to test the property options
        expect(instance).to.have.property('options');
        // expect(instance.options).to.be(expectedValueLiteral);
      });

      it('should have the property parent (base name: "parent")', function() {
        // TODO: update the code to test the property parent
        expect(instance).to.have.property('parent');
        // expect(instance.parent).to.be(expectedValueLiteral);
      });

      it('should have the property sortOrder (base name: "sort_order")', function() {
        // TODO: update the code to test the property sortOrder
        expect(instance).to.have.property('sortOrder');
        // expect(instance.sortOrder).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property lft (base name: "lft")', function() {
        // TODO: update the code to test the property lft
        expect(instance).to.have.property('lft');
        // expect(instance.lft).to.be(expectedValueLiteral);
      });

      it('should have the property rght (base name: "rght")', function() {
        // TODO: update the code to test the property rght
        expect(instance).to.have.property('rght');
        // expect(instance.rght).to.be(expectedValueLiteral);
      });

      it('should have the property treeId (base name: "tree_id")', function() {
        // TODO: update the code to test the property treeId
        expect(instance).to.have.property('treeId');
        // expect(instance.treeId).to.be(expectedValueLiteral);
      });

      it('should have the property learningActivities (base name: "learning_activities")', function() {
        // TODO: update the code to test the property learningActivities
        expect(instance).to.have.property('learningActivities');
        // expect(instance.learningActivities).to.be(expectedValueLiteral);
      });

      it('should have the property gradeLevels (base name: "grade_levels")', function() {
        // TODO: update the code to test the property gradeLevels
        expect(instance).to.have.property('gradeLevels');
        // expect(instance.gradeLevels).to.be(expectedValueLiteral);
      });

      it('should have the property resourceTypes (base name: "resource_types")', function() {
        // TODO: update the code to test the property resourceTypes
        expect(instance).to.have.property('resourceTypes');
        // expect(instance.resourceTypes).to.be(expectedValueLiteral);
      });

      it('should have the property accessibilityLabels (base name: "accessibility_labels")', function() {
        // TODO: update the code to test the property accessibilityLabels
        expect(instance).to.have.property('accessibilityLabels');
        // expect(instance.accessibilityLabels).to.be(expectedValueLiteral);
      });

      it('should have the property categories (base name: "categories")', function() {
        // TODO: update the code to test the property categories
        expect(instance).to.have.property('categories');
        // expect(instance.categories).to.be(expectedValueLiteral);
      });

      it('should have the property duration (base name: "duration")', function() {
        // TODO: update the code to test the property duration
        expect(instance).to.have.property('duration');
        // expect(instance.duration).to.be(expectedValueLiteral);
      });

      it('should have the property ancestors (base name: "ancestors")', function() {
        // TODO: update the code to test the property ancestors
        expect(instance).to.have.property('ancestors');
        // expect(instance.ancestors).to.be(expectedValueLiteral);
      });

    });
  });

}));
