/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Exam', function() {
      beforeEach(function() {
        instance = new KolibriApi.Exam();
      });

      it('should create an instance of Exam', function() {
        // TODO: update the code to test Exam
        expect(instance).to.be.a(KolibriApi.Exam);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property title (base name: "title")', function() {
        // TODO: update the code to test the property title
        expect(instance).to.have.property('title');
        // expect(instance.title).to.be(expectedValueLiteral);
      });

      it('should have the property questionCount (base name: "question_count")', function() {
        // TODO: update the code to test the property questionCount
        expect(instance).to.have.property('questionCount');
        // expect(instance.questionCount).to.be(expectedValueLiteral);
      });

      it('should have the property questionSources (base name: "question_sources")', function() {
        // TODO: update the code to test the property questionSources
        expect(instance).to.have.property('questionSources');
        // expect(instance.questionSources).to.be(expectedValueLiteral);
      });

      it('should have the property seed (base name: "seed")', function() {
        // TODO: update the code to test the property seed
        expect(instance).to.have.property('seed');
        // expect(instance.seed).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property collection (base name: "collection")', function() {
        // TODO: update the code to test the property collection
        expect(instance).to.have.property('collection');
        // expect(instance.collection).to.be(expectedValueLiteral);
      });

      it('should have the property archive (base name: "archive")', function() {
        // TODO: update the code to test the property archive
        expect(instance).to.have.property('archive');
        // expect(instance.archive).to.be(expectedValueLiteral);
      });

      it('should have the property dateArchived (base name: "date_archived")', function() {
        // TODO: update the code to test the property dateArchived
        expect(instance).to.have.property('dateArchived');
        // expect(instance.dateArchived).to.be(expectedValueLiteral);
      });

      it('should have the property dateActivated (base name: "date_activated")', function() {
        // TODO: update the code to test the property dateActivated
        expect(instance).to.have.property('dateActivated');
        // expect(instance.dateActivated).to.be(expectedValueLiteral);
      });

      it('should have the property assignments (base name: "assignments")', function() {
        // TODO: update the code to test the property assignments
        expect(instance).to.have.property('assignments');
        // expect(instance.assignments).to.be(expectedValueLiteral);
      });

      it('should have the property creator (base name: "creator")', function() {
        // TODO: update the code to test the property creator
        expect(instance).to.have.property('creator');
        // expect(instance.creator).to.be(expectedValueLiteral);
      });

      it('should have the property dataModelVersion (base name: "data_model_version")', function() {
        // TODO: update the code to test the property dataModelVersion
        expect(instance).to.have.property('dataModelVersion');
        // expect(instance.dataModelVersion).to.be(expectedValueLiteral);
      });

      it('should have the property learnersSeeFixedOrder (base name: "learners_see_fixed_order")', function() {
        // TODO: update the code to test the property learnersSeeFixedOrder
        expect(instance).to.have.property('learnersSeeFixedOrder');
        // expect(instance.learnersSeeFixedOrder).to.be(expectedValueLiteral);
      });

      it('should have the property learnerIds (base name: "learner_ids")', function() {
        // TODO: update the code to test the property learnerIds
        expect(instance).to.have.property('learnerIds');
        // expect(instance.learnerIds).to.be(expectedValueLiteral);
      });

    });
  });

}));
