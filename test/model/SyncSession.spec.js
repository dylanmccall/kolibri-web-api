/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('SyncSession', function() {
      beforeEach(function() {
        instance = new KolibriApi.SyncSession();
      });

      it('should create an instance of SyncSession', function() {
        // TODO: update the code to test SyncSession
        expect(instance).to.be.a(KolibriApi.SyncSession);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property startTimestamp (base name: "start_timestamp")', function() {
        // TODO: update the code to test the property startTimestamp
        expect(instance).to.have.property('startTimestamp');
        // expect(instance.startTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivityTimestamp (base name: "last_activity_timestamp")', function() {
        // TODO: update the code to test the property lastActivityTimestamp
        expect(instance).to.have.property('lastActivityTimestamp');
        // expect(instance.lastActivityTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property clientCertificate (base name: "client_certificate")', function() {
        // TODO: update the code to test the property clientCertificate
        expect(instance).to.have.property('clientCertificate');
        // expect(instance.clientCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property serverCertificate (base name: "server_certificate")', function() {
        // TODO: update the code to test the property serverCertificate
        expect(instance).to.have.property('serverCertificate');
        // expect(instance.serverCertificate).to.be(expectedValueLiteral);
      });

      it('should have the property profile (base name: "profile")', function() {
        // TODO: update the code to test the property profile
        expect(instance).to.have.property('profile');
        // expect(instance.profile).to.be(expectedValueLiteral);
      });

      it('should have the property connectionKind (base name: "connection_kind")', function() {
        // TODO: update the code to test the property connectionKind
        expect(instance).to.have.property('connectionKind');
        // expect(instance.connectionKind).to.be(expectedValueLiteral);
      });

      it('should have the property connectionPath (base name: "connection_path")', function() {
        // TODO: update the code to test the property connectionPath
        expect(instance).to.have.property('connectionPath');
        // expect(instance.connectionPath).to.be(expectedValueLiteral);
      });

      it('should have the property clientIp (base name: "client_ip")', function() {
        // TODO: update the code to test the property clientIp
        expect(instance).to.have.property('clientIp');
        // expect(instance.clientIp).to.be(expectedValueLiteral);
      });

      it('should have the property serverIp (base name: "server_ip")', function() {
        // TODO: update the code to test the property serverIp
        expect(instance).to.have.property('serverIp');
        // expect(instance.serverIp).to.be(expectedValueLiteral);
      });

      it('should have the property clientInstance (base name: "client_instance")', function() {
        // TODO: update the code to test the property clientInstance
        expect(instance).to.have.property('clientInstance');
        // expect(instance.clientInstance).to.be(expectedValueLiteral);
      });

      it('should have the property serverInstance (base name: "server_instance")', function() {
        // TODO: update the code to test the property serverInstance
        expect(instance).to.have.property('serverInstance');
        // expect(instance.serverInstance).to.be(expectedValueLiteral);
      });

    });
  });

}));
