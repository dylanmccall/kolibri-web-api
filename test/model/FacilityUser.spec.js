/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FacilityUser', function() {
      beforeEach(function() {
        instance = new KolibriApi.FacilityUser();
      });

      it('should create an instance of FacilityUser', function() {
        // TODO: update the code to test FacilityUser
        expect(instance).to.be.a(KolibriApi.FacilityUser);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property username (base name: "username")', function() {
        // TODO: update the code to test the property username
        expect(instance).to.have.property('username');
        // expect(instance.username).to.be(expectedValueLiteral);
      });

      it('should have the property fullName (base name: "full_name")', function() {
        // TODO: update the code to test the property fullName
        expect(instance).to.have.property('fullName');
        // expect(instance.fullName).to.be(expectedValueLiteral);
      });

      it('should have the property password (base name: "password")', function() {
        // TODO: update the code to test the property password
        expect(instance).to.have.property('password');
        // expect(instance.password).to.be(expectedValueLiteral);
      });

      it('should have the property facility (base name: "facility")', function() {
        // TODO: update the code to test the property facility
        expect(instance).to.have.property('facility');
        // expect(instance.facility).to.be(expectedValueLiteral);
      });

      it('should have the property roles (base name: "roles")', function() {
        // TODO: update the code to test the property roles
        expect(instance).to.have.property('roles');
        // expect(instance.roles).to.be(expectedValueLiteral);
      });

      it('should have the property isSuperuser (base name: "is_superuser")', function() {
        // TODO: update the code to test the property isSuperuser
        expect(instance).to.have.property('isSuperuser');
        // expect(instance.isSuperuser).to.be(expectedValueLiteral);
      });

      it('should have the property idNumber (base name: "id_number")', function() {
        // TODO: update the code to test the property idNumber
        expect(instance).to.have.property('idNumber');
        // expect(instance.idNumber).to.be(expectedValueLiteral);
      });

      it('should have the property gender (base name: "gender")', function() {
        // TODO: update the code to test the property gender
        expect(instance).to.have.property('gender');
        // expect(instance.gender).to.be(expectedValueLiteral);
      });

      it('should have the property birthYear (base name: "birth_year")', function() {
        // TODO: update the code to test the property birthYear
        expect(instance).to.have.property('birthYear');
        // expect(instance.birthYear).to.be(expectedValueLiteral);
      });

    });
  });

}));
