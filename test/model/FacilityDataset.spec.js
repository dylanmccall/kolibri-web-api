/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('FacilityDataset', function() {
      beforeEach(function() {
        instance = new KolibriApi.FacilityDataset();
      });

      it('should create an instance of FacilityDataset', function() {
        // TODO: update the code to test FacilityDataset
        expect(instance).to.be.a(KolibriApi.FacilityDataset);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanEditUsername (base name: "learner_can_edit_username")', function() {
        // TODO: update the code to test the property learnerCanEditUsername
        expect(instance).to.have.property('learnerCanEditUsername');
        // expect(instance.learnerCanEditUsername).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanEditName (base name: "learner_can_edit_name")', function() {
        // TODO: update the code to test the property learnerCanEditName
        expect(instance).to.have.property('learnerCanEditName');
        // expect(instance.learnerCanEditName).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanEditPassword (base name: "learner_can_edit_password")', function() {
        // TODO: update the code to test the property learnerCanEditPassword
        expect(instance).to.have.property('learnerCanEditPassword');
        // expect(instance.learnerCanEditPassword).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanSignUp (base name: "learner_can_sign_up")', function() {
        // TODO: update the code to test the property learnerCanSignUp
        expect(instance).to.have.property('learnerCanSignUp');
        // expect(instance.learnerCanSignUp).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanDeleteAccount (base name: "learner_can_delete_account")', function() {
        // TODO: update the code to test the property learnerCanDeleteAccount
        expect(instance).to.have.property('learnerCanDeleteAccount');
        // expect(instance.learnerCanDeleteAccount).to.be(expectedValueLiteral);
      });

      it('should have the property learnerCanLoginWithNoPassword (base name: "learner_can_login_with_no_password")', function() {
        // TODO: update the code to test the property learnerCanLoginWithNoPassword
        expect(instance).to.have.property('learnerCanLoginWithNoPassword');
        // expect(instance.learnerCanLoginWithNoPassword).to.be(expectedValueLiteral);
      });

      it('should have the property showDownloadButtonInLearn (base name: "show_download_button_in_learn")', function() {
        // TODO: update the code to test the property showDownloadButtonInLearn
        expect(instance).to.have.property('showDownloadButtonInLearn');
        // expect(instance.showDownloadButtonInLearn).to.be(expectedValueLiteral);
      });

      it('should have the property description (base name: "description")', function() {
        // TODO: update the code to test the property description
        expect(instance).to.have.property('description');
        // expect(instance.description).to.be(expectedValueLiteral);
      });

      it('should have the property location (base name: "location")', function() {
        // TODO: update the code to test the property location
        expect(instance).to.have.property('location');
        // expect(instance.location).to.be(expectedValueLiteral);
      });

      it('should have the property registered (base name: "registered")', function() {
        // TODO: update the code to test the property registered
        expect(instance).to.have.property('registered');
        // expect(instance.registered).to.be(expectedValueLiteral);
      });

      it('should have the property preset (base name: "preset")', function() {
        // TODO: update the code to test the property preset
        expect(instance).to.have.property('preset');
        // expect(instance.preset).to.be(expectedValueLiteral);
      });

    });
  });

}));
