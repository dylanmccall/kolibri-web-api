/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('TransferSession', function() {
      beforeEach(function() {
        instance = new KolibriApi.TransferSession();
      });

      it('should create an instance of TransferSession', function() {
        // TODO: update the code to test TransferSession
        expect(instance).to.be.a(KolibriApi.TransferSession);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property startTimestamp (base name: "start_timestamp")', function() {
        // TODO: update the code to test the property startTimestamp
        expect(instance).to.have.property('startTimestamp');
        // expect(instance.startTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property lastActivityTimestamp (base name: "last_activity_timestamp")', function() {
        // TODO: update the code to test the property lastActivityTimestamp
        expect(instance).to.have.property('lastActivityTimestamp');
        // expect(instance.lastActivityTimestamp).to.be(expectedValueLiteral);
      });

      it('should have the property active (base name: "active")', function() {
        // TODO: update the code to test the property active
        expect(instance).to.have.property('active');
        // expect(instance.active).to.be(expectedValueLiteral);
      });

      it('should have the property filter (base name: "filter")', function() {
        // TODO: update the code to test the property filter
        expect(instance).to.have.property('filter');
        // expect(instance.filter).to.be(expectedValueLiteral);
      });

      it('should have the property push (base name: "push")', function() {
        // TODO: update the code to test the property push
        expect(instance).to.have.property('push');
        // expect(instance.push).to.be(expectedValueLiteral);
      });

      it('should have the property recordsTransferred (base name: "records_transferred")', function() {
        // TODO: update the code to test the property recordsTransferred
        expect(instance).to.have.property('recordsTransferred');
        // expect(instance.recordsTransferred).to.be(expectedValueLiteral);
      });

      it('should have the property recordsTotal (base name: "records_total")', function() {
        // TODO: update the code to test the property recordsTotal
        expect(instance).to.have.property('recordsTotal');
        // expect(instance.recordsTotal).to.be(expectedValueLiteral);
      });

      it('should have the property bytesReceived (base name: "bytes_received")', function() {
        // TODO: update the code to test the property bytesReceived
        expect(instance).to.have.property('bytesReceived');
        // expect(instance.bytesReceived).to.be(expectedValueLiteral);
      });

      it('should have the property bytesSent (base name: "bytes_sent")', function() {
        // TODO: update the code to test the property bytesSent
        expect(instance).to.have.property('bytesSent');
        // expect(instance.bytesSent).to.be(expectedValueLiteral);
      });

      it('should have the property syncSession (base name: "sync_session")', function() {
        // TODO: update the code to test the property syncSession
        expect(instance).to.have.property('syncSession');
        // expect(instance.syncSession).to.be(expectedValueLiteral);
      });

      it('should have the property serverFsic (base name: "server_fsic")', function() {
        // TODO: update the code to test the property serverFsic
        expect(instance).to.have.property('serverFsic');
        // expect(instance.serverFsic).to.be(expectedValueLiteral);
      });

      it('should have the property clientFsic (base name: "client_fsic")', function() {
        // TODO: update the code to test the property clientFsic
        expect(instance).to.have.property('clientFsic');
        // expect(instance.clientFsic).to.be(expectedValueLiteral);
      });

      it('should have the property transferStage (base name: "transfer_stage")', function() {
        // TODO: update the code to test the property transferStage
        expect(instance).to.have.property('transferStage');
        // expect(instance.transferStage).to.be(expectedValueLiteral);
      });

      it('should have the property transferStageStatus (base name: "transfer_stage_status")', function() {
        // TODO: update the code to test the property transferStageStatus
        expect(instance).to.have.property('transferStageStatus');
        // expect(instance.transferStageStatus).to.be(expectedValueLiteral);
      });

    });
  });

}));
