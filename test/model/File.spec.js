/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.KolibriApi);
  }
}(this, function(expect, KolibriApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('File', function() {
      beforeEach(function() {
        instance = new KolibriApi.File();
      });

      it('should create an instance of File', function() {
        // TODO: update the code to test File
        expect(instance).to.be.a(KolibriApi.File);
      });

      it('should have the property storageUrl (base name: "storage_url")', function() {
        // TODO: update the code to test the property storageUrl
        expect(instance).to.have.property('storageUrl');
        // expect(instance.storageUrl).to.be(expectedValueLiteral);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property priority (base name: "priority")', function() {
        // TODO: update the code to test the property priority
        expect(instance).to.have.property('priority');
        // expect(instance.priority).to.be(expectedValueLiteral);
      });

      it('should have the property available (base name: "available")', function() {
        // TODO: update the code to test the property available
        expect(instance).to.have.property('available');
        // expect(instance.available).to.be(expectedValueLiteral);
      });

      it('should have the property fileSize (base name: "file_size")', function() {
        // TODO: update the code to test the property fileSize
        expect(instance).to.have.property('fileSize');
        // expect(instance.fileSize).to.be(expectedValueLiteral);
      });

      it('should have the property extension (base name: "extension")', function() {
        // TODO: update the code to test the property extension
        expect(instance).to.have.property('extension');
        // expect(instance.extension).to.be(expectedValueLiteral);
      });

      it('should have the property checksum (base name: "checksum")', function() {
        // TODO: update the code to test the property checksum
        expect(instance).to.have.property('checksum');
        // expect(instance.checksum).to.be(expectedValueLiteral);
      });

      it('should have the property preset (base name: "preset")', function() {
        // TODO: update the code to test the property preset
        expect(instance).to.have.property('preset');
        // expect(instance.preset).to.be(expectedValueLiteral);
      });

      it('should have the property lang (base name: "lang")', function() {
        // TODO: update the code to test the property lang
        expect(instance).to.have.property('lang');
        // expect(instance.lang).to.be(expectedValueLiteral);
      });

      it('should have the property supplementary (base name: "supplementary")', function() {
        // TODO: update the code to test the property supplementary
        expect(instance).to.have.property('supplementary');
        // expect(instance.supplementary).to.be(expectedValueLiteral);
      });

      it('should have the property thumbnail (base name: "thumbnail")', function() {
        // TODO: update the code to test the property thumbnail
        expect(instance).to.have.property('thumbnail');
        // expect(instance.thumbnail).to.be(expectedValueLiteral);
      });

    });
  });

}));
