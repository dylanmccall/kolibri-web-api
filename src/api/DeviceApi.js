/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeviceChannelMetadata'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeviceChannelMetadata'));
  } else {
    // Browser globals (root is window)
    if (!root.KolibriApi) {
      root.KolibriApi = {};
    }
    root.KolibriApi.DeviceApi = factory(root.KolibriApi.ApiClient, root.KolibriApi.DeviceChannelMetadata);
  }
}(this, function(ApiClient, DeviceChannelMetadata) {
  'use strict';

  /**
   * Device service.
   * @module api/DeviceApi
   * @version v0
   */

  /**
   * Constructs a new DeviceApi. 
   * @alias module:api/DeviceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deviceApiDeviceChannelList operation.
     * @callback module:api/DeviceApi~deviceApiDeviceChannelListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DeviceChannelMetadata>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.available 
     * @param {String} opts.hasExercise 
     * @param {module:api/DeviceApi~deviceApiDeviceChannelListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DeviceChannelMetadata>}
     */
    this.deviceApiDeviceChannelList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'available': opts['available'],
        'has_exercise': opts['hasExercise'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DeviceChannelMetadata];

      return this.apiClient.callApi(
        '/device/api/device_channel/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceApiDeviceChannelRead operation.
     * @callback module:api/DeviceApi~deviceApiDeviceChannelReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceChannelMetadata} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/DeviceApi~deviceApiDeviceChannelReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceChannelMetadata}
     */
    this.deviceApiDeviceChannelRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deviceApiDeviceChannelRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceChannelMetadata;

      return this.apiClient.callApi(
        '/device/api/device_channel/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceApiDevicechannelorderCreate operation.
     * @callback module:api/DeviceApi~deviceApiDevicechannelorderCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/DeviceApi~deviceApiDevicechannelorderCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceApiDevicechannelorderCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/device/api/devicechannelorder', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deviceApiImportexportsizeviewCreate operation.
     * @callback module:api/DeviceApi~deviceApiImportexportsizeviewCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/DeviceApi~deviceApiImportexportsizeviewCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deviceApiImportexportsizeviewCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/device/api/importexportsizeview', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
