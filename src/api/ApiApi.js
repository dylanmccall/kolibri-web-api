/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AttemptLogViewSet', 'model/Bookmarks', 'model/Buffer', 'model/Certificate', 'model/ChannelMetadataViewSet', 'model/Classroom', 'model/ContentNodeTreeViewset', 'model/ContentNodeViewset', 'model/DevicePermissions', 'model/DeviceProvision', 'model/Exam', 'model/Facility', 'model/FacilityDataset', 'model/FacilityUser', 'model/InlineResponse200', 'model/InlineResponse2001', 'model/InlineResponse2002', 'model/InlineResponse2003', 'model/InlineResponse2004', 'model/InlineResponse2005', 'model/InlineResponse2006', 'model/InlineResponse2007', 'model/LearnerGroup', 'model/Lesson', 'model/MasteryLogViewSet', 'model/Membership', 'model/NetworkLocation', 'model/Nonce', 'model/PingbackNotification', 'model/PingbackNotificationDismissed', 'model/PublicFacility', 'model/PublicFacilityUser', 'model/Role', 'model/SharedKey', 'model/SyncSession', 'model/TransferSession', 'model/UserSyncStatusViewSet'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AttemptLogViewSet'), require('../model/Bookmarks'), require('../model/Buffer'), require('../model/Certificate'), require('../model/ChannelMetadataViewSet'), require('../model/Classroom'), require('../model/ContentNodeTreeViewset'), require('../model/ContentNodeViewset'), require('../model/DevicePermissions'), require('../model/DeviceProvision'), require('../model/Exam'), require('../model/Facility'), require('../model/FacilityDataset'), require('../model/FacilityUser'), require('../model/InlineResponse200'), require('../model/InlineResponse2001'), require('../model/InlineResponse2002'), require('../model/InlineResponse2003'), require('../model/InlineResponse2004'), require('../model/InlineResponse2005'), require('../model/InlineResponse2006'), require('../model/InlineResponse2007'), require('../model/LearnerGroup'), require('../model/Lesson'), require('../model/MasteryLogViewSet'), require('../model/Membership'), require('../model/NetworkLocation'), require('../model/Nonce'), require('../model/PingbackNotification'), require('../model/PingbackNotificationDismissed'), require('../model/PublicFacility'), require('../model/PublicFacilityUser'), require('../model/Role'), require('../model/SharedKey'), require('../model/SyncSession'), require('../model/TransferSession'), require('../model/UserSyncStatusViewSet'));
  } else {
    // Browser globals (root is window)
    if (!root.KolibriApi) {
      root.KolibriApi = {};
    }
    root.KolibriApi.ApiApi = factory(root.KolibriApi.ApiClient, root.KolibriApi.AttemptLogViewSet, root.KolibriApi.Bookmarks, root.KolibriApi.Buffer, root.KolibriApi.Certificate, root.KolibriApi.ChannelMetadataViewSet, root.KolibriApi.Classroom, root.KolibriApi.ContentNodeTreeViewset, root.KolibriApi.ContentNodeViewset, root.KolibriApi.DevicePermissions, root.KolibriApi.DeviceProvision, root.KolibriApi.Exam, root.KolibriApi.Facility, root.KolibriApi.FacilityDataset, root.KolibriApi.FacilityUser, root.KolibriApi.InlineResponse200, root.KolibriApi.InlineResponse2001, root.KolibriApi.InlineResponse2002, root.KolibriApi.InlineResponse2003, root.KolibriApi.InlineResponse2004, root.KolibriApi.InlineResponse2005, root.KolibriApi.InlineResponse2006, root.KolibriApi.InlineResponse2007, root.KolibriApi.LearnerGroup, root.KolibriApi.Lesson, root.KolibriApi.MasteryLogViewSet, root.KolibriApi.Membership, root.KolibriApi.NetworkLocation, root.KolibriApi.Nonce, root.KolibriApi.PingbackNotification, root.KolibriApi.PingbackNotificationDismissed, root.KolibriApi.PublicFacility, root.KolibriApi.PublicFacilityUser, root.KolibriApi.Role, root.KolibriApi.SharedKey, root.KolibriApi.SyncSession, root.KolibriApi.TransferSession, root.KolibriApi.UserSyncStatusViewSet);
  }
}(this, function(ApiClient, AttemptLogViewSet, Bookmarks, Buffer, Certificate, ChannelMetadataViewSet, Classroom, ContentNodeTreeViewset, ContentNodeViewset, DevicePermissions, DeviceProvision, Exam, Facility, FacilityDataset, FacilityUser, InlineResponse200, InlineResponse2001, InlineResponse2002, InlineResponse2003, InlineResponse2004, InlineResponse2005, InlineResponse2006, InlineResponse2007, LearnerGroup, Lesson, MasteryLogViewSet, Membership, NetworkLocation, Nonce, PingbackNotification, PingbackNotificationDismissed, PublicFacility, PublicFacilityUser, Role, SharedKey, SyncSession, TransferSession, UserSyncStatusViewSet) {
  'use strict';

  /**
   * Api service.
   * @module api/ApiApi
   * @version v0
   */

  /**
   * Constructs a new ApiApi. 
   * @alias module:api/ApiApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the apiAuthClassroomCreate operation.
     * @callback module:api/ApiApi~apiAuthClassroomCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Classroom} data 
     * @param {module:api/ApiApi~apiAuthClassroomCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classroom}
     */
    this.apiAuthClassroomCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthClassroomCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classroom;

      return this.apiClient.callApi(
        '/api/auth/classroom/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthClassroomDelete operation.
     * @callback module:api/ApiApi~apiAuthClassroomDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this classroom.
     * @param {module:api/ApiApi~apiAuthClassroomDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthClassroomDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthClassroomDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/classroom/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthClassroomList operation.
     * @callback module:api/ApiApi~apiAuthClassroomListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Classroom>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.role 
     * @param {String} opts.parent 
     * @param {module:api/ApiApi~apiAuthClassroomListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Classroom>}
     */
    this.apiAuthClassroomList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'role': opts['role'],
        'parent': opts['parent'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Classroom];

      return this.apiClient.callApi(
        '/api/auth/classroom/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthClassroomPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthClassroomPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this classroom.
     * @param {module:model/Classroom} data 
     * @param {module:api/ApiApi~apiAuthClassroomPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classroom}
     */
    this.apiAuthClassroomPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthClassroomPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthClassroomPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classroom;

      return this.apiClient.callApi(
        '/api/auth/classroom/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthClassroomRead operation.
     * @callback module:api/ApiApi~apiAuthClassroomReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this classroom.
     * @param {module:api/ApiApi~apiAuthClassroomReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classroom}
     */
    this.apiAuthClassroomRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthClassroomRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classroom;

      return this.apiClient.callApi(
        '/api/auth/classroom/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthClassroomUpdate operation.
     * @callback module:api/ApiApi~apiAuthClassroomUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Classroom} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this classroom.
     * @param {module:model/Classroom} data 
     * @param {module:api/ApiApi~apiAuthClassroomUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Classroom}
     */
    this.apiAuthClassroomUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthClassroomUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthClassroomUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Classroom;

      return this.apiClient.callApi(
        '/api/auth/classroom/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityCreate operation.
     * @callback module:api/ApiApi~apiAuthFacilityCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Facility} data 
     * @param {module:api/ApiApi~apiAuthFacilityCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facility}
     */
    this.apiAuthFacilityCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Facility;

      return this.apiClient.callApi(
        '/api/auth/facility/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityDelete operation.
     * @callback module:api/ApiApi~apiAuthFacilityDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility.
     * @param {module:api/ApiApi~apiAuthFacilityDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthFacilityDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/facility/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityList operation.
     * @callback module:api/ApiApi~apiAuthFacilityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Facility>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthFacilityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Facility>}
     */
    this.apiAuthFacilityList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Facility];

      return this.apiClient.callApi(
        '/api/auth/facility/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilityPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility.
     * @param {module:model/Facility} data 
     * @param {module:api/ApiApi~apiAuthFacilityPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facility}
     */
    this.apiAuthFacilityPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Facility;

      return this.apiClient.callApi(
        '/api/auth/facility/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityRead operation.
     * @callback module:api/ApiApi~apiAuthFacilityReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility.
     * @param {module:api/ApiApi~apiAuthFacilityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facility}
     */
    this.apiAuthFacilityRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Facility;

      return this.apiClient.callApi(
        '/api/auth/facility/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilityUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Facility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility.
     * @param {module:model/Facility} data 
     * @param {module:api/ApiApi~apiAuthFacilityUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Facility}
     */
    this.apiAuthFacilityUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Facility;

      return this.apiClient.callApi(
        '/api/auth/facility/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetCreate operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityDataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FacilityDataset} data 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityDataset}
     */
    this.apiAuthFacilitydatasetCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilitydatasetCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityDataset;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetDelete operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthFacilitydatasetDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilitydatasetDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetList operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FacilityDataset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FacilityDataset>}
     */
    this.apiAuthFacilitydatasetList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FacilityDataset];

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityDataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/FacilityDataset} data 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityDataset}
     */
    this.apiAuthFacilitydatasetPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilitydatasetPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilitydatasetPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityDataset;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetRead operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityDataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityDataset}
     */
    this.apiAuthFacilitydatasetRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilitydatasetRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityDataset;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetResetsettings operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetResetsettingsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityDataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/FacilityDataset} data 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetResetsettingsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityDataset}
     */
    this.apiAuthFacilitydatasetResetsettings = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilitydatasetResetsettings");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilitydatasetResetsettings");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityDataset;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/{id}/resetsettings/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilitydatasetUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilitydatasetUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityDataset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/FacilityDataset} data 
     * @param {module:api/ApiApi~apiAuthFacilitydatasetUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityDataset}
     */
    this.apiAuthFacilitydatasetUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilitydatasetUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilitydatasetUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityDataset;

      return this.apiClient.callApi(
        '/api/auth/facilitydataset/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserCreate operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/FacilityUser} data 
     * @param {module:api/ApiApi~apiAuthFacilityuserCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityUser}
     */
    this.apiAuthFacilityuserCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityuserCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityUser;

      return this.apiClient.callApi(
        '/api/auth/facilityuser/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserDelete operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility user.
     * @param {module:api/ApiApi~apiAuthFacilityuserDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthFacilityuserDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityuserDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/facilityuser/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserList operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/FacilityUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.memberOf 
     * @param {module:api/ApiApi~apiAuthFacilityuserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/FacilityUser>}
     */
    this.apiAuthFacilityuserList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'member_of': opts['memberOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [FacilityUser];

      return this.apiClient.callApi(
        '/api/auth/facilityuser/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility user.
     * @param {module:model/FacilityUser} data 
     * @param {module:api/ApiApi~apiAuthFacilityuserPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityUser}
     */
    this.apiAuthFacilityuserPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityuserPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityuserPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityUser;

      return this.apiClient.callApi(
        '/api/auth/facilityuser/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserRead operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility user.
     * @param {module:api/ApiApi~apiAuthFacilityuserReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityUser}
     */
    this.apiAuthFacilityuserRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityuserRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityUser;

      return this.apiClient.callApi(
        '/api/auth/facilityuser/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityuserUpdate operation.
     * @callback module:api/ApiApi~apiAuthFacilityuserUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FacilityUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility user.
     * @param {module:model/FacilityUser} data 
     * @param {module:api/ApiApi~apiAuthFacilityuserUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FacilityUser}
     */
    this.apiAuthFacilityuserUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityuserUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthFacilityuserUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = FacilityUser;

      return this.apiClient.callApi(
        '/api/auth/facilityuser/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityusernameList operation.
     * @callback module:api/ApiApi~apiAuthFacilityusernameListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<Object>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.search A search term.
     * @param {module:api/ApiApi~apiAuthFacilityusernameListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<Object>}
     */
    this.apiAuthFacilityusernameList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'search': opts['search'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Object];

      return this.apiClient.callApi(
        '/api/auth/facilityusername/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthFacilityusernameRead operation.
     * @callback module:api/ApiApi~apiAuthFacilityusernameReadCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiAuthFacilityusernameReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.apiAuthFacilityusernameRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthFacilityusernameRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/api/auth/facilityusername/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupCreate operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearnerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/LearnerGroup} data 
     * @param {module:api/ApiApi~apiAuthLearnergroupCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearnerGroup}
     */
    this.apiAuthLearnergroupCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthLearnergroupCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LearnerGroup;

      return this.apiClient.callApi(
        '/api/auth/learnergroup/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupDelete operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this learner group.
     * @param {module:api/ApiApi~apiAuthLearnergroupDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthLearnergroupDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthLearnergroupDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/learnergroup/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupList operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LearnerGroup>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {module:api/ApiApi~apiAuthLearnergroupListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LearnerGroup>}
     */
    this.apiAuthLearnergroupList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [LearnerGroup];

      return this.apiClient.callApi(
        '/api/auth/learnergroup/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearnerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this learner group.
     * @param {module:model/LearnerGroup} data 
     * @param {module:api/ApiApi~apiAuthLearnergroupPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearnerGroup}
     */
    this.apiAuthLearnergroupPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthLearnergroupPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthLearnergroupPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LearnerGroup;

      return this.apiClient.callApi(
        '/api/auth/learnergroup/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupRead operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearnerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this learner group.
     * @param {module:api/ApiApi~apiAuthLearnergroupReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearnerGroup}
     */
    this.apiAuthLearnergroupRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthLearnergroupRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LearnerGroup;

      return this.apiClient.callApi(
        '/api/auth/learnergroup/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthLearnergroupUpdate operation.
     * @callback module:api/ApiApi~apiAuthLearnergroupUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LearnerGroup} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this learner group.
     * @param {module:model/LearnerGroup} data 
     * @param {module:api/ApiApi~apiAuthLearnergroupUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LearnerGroup}
     */
    this.apiAuthLearnergroupUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthLearnergroupUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthLearnergroupUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = LearnerGroup;

      return this.apiClient.callApi(
        '/api/auth/learnergroup/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipCreate operation.
     * @callback module:api/ApiApi~apiAuthMembershipCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Membership} data 
     * @param {module:api/ApiApi~apiAuthMembershipCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    this.apiAuthMembershipCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthMembershipCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Membership;

      return this.apiClient.callApi(
        '/api/auth/membership/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipDelete operation.
     * @callback module:api/ApiApi~apiAuthMembershipDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthMembershipDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthMembershipDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/membership/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipDelete_0 operation.
     * @callback module:api/ApiApi~apiAuthMembershipDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this membership.
     * @param {module:api/ApiApi~apiAuthMembershipDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthMembershipDelete_0 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthMembershipDelete_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/membership/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipList operation.
     * @callback module:api/ApiApi~apiAuthMembershipListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Membership>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.collection 
     * @param {String} opts.userIds 
     * @param {module:api/ApiApi~apiAuthMembershipListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Membership>}
     */
    this.apiAuthMembershipList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user': opts['user'],
        'collection': opts['collection'],
        'user_ids': opts['userIds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Membership];

      return this.apiClient.callApi(
        '/api/auth/membership/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipPartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthMembershipPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this membership.
     * @param {module:model/Membership} data 
     * @param {module:api/ApiApi~apiAuthMembershipPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    this.apiAuthMembershipPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthMembershipPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthMembershipPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Membership;

      return this.apiClient.callApi(
        '/api/auth/membership/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipRead operation.
     * @callback module:api/ApiApi~apiAuthMembershipReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this membership.
     * @param {module:api/ApiApi~apiAuthMembershipReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    this.apiAuthMembershipRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthMembershipRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Membership;

      return this.apiClient.callApi(
        '/api/auth/membership/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthMembershipUpdate operation.
     * @callback module:api/ApiApi~apiAuthMembershipUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Membership} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this membership.
     * @param {module:model/Membership} data 
     * @param {module:api/ApiApi~apiAuthMembershipUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Membership}
     */
    this.apiAuthMembershipUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthMembershipUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthMembershipUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Membership;

      return this.apiClient.callApi(
        '/api/auth/membership/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthPortalRegister operation.
     * @callback module:api/ApiApi~apiAuthPortalRegisterCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthPortalRegisterCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthPortalRegister = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/portal/register/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthPortalValidateToken operation.
     * @callback module:api/ApiApi~apiAuthPortalValidateTokenCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthPortalValidateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthPortalValidateToken = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/portal/validate_token/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleCreate operation.
     * @callback module:api/ApiApi~apiAuthRoleCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Role} data 
     * @param {module:api/ApiApi~apiAuthRoleCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthRoleCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthRoleCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/auth/role/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleDelete operation.
     * @callback module:api/ApiApi~apiAuthRoleDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthRoleDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthRoleDelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/role/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleDelete_0 operation.
     * @callback module:api/ApiApi~apiAuthRoleDelete_0Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this role.
     * @param {module:api/ApiApi~apiAuthRoleDelete_0Callback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthRoleDelete_0 = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthRoleDelete_0");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/role/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleList operation.
     * @callback module:api/ApiApi~apiAuthRoleListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Role>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.collection 
     * @param {String} opts.kind 
     * @param {String} opts.userIds 
     * @param {module:api/ApiApi~apiAuthRoleListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Role>}
     */
    this.apiAuthRoleList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user': opts['user'],
        'collection': opts['collection'],
        'kind': opts['kind'],
        'user_ids': opts['userIds'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Role];

      return this.apiClient.callApi(
        '/api/auth/role/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRolePartialUpdate operation.
     * @callback module:api/ApiApi~apiAuthRolePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this role.
     * @param {module:model/Role} data 
     * @param {module:api/ApiApi~apiAuthRolePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthRolePartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthRolePartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthRolePartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/auth/role/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleRead operation.
     * @callback module:api/ApiApi~apiAuthRoleReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this role.
     * @param {module:api/ApiApi~apiAuthRoleReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthRoleRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthRoleRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/auth/role/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthRoleUpdate operation.
     * @callback module:api/ApiApi~apiAuthRoleUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Role} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this role.
     * @param {module:model/Role} data 
     * @param {module:api/ApiApi~apiAuthRoleUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Role}
     */
    this.apiAuthRoleUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthRoleUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiAuthRoleUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Role;

      return this.apiClient.callApi(
        '/api/auth/role/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthSessionCreate operation.
     * @callback module:api/ApiApi~apiAuthSessionCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthSessionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthSessionCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/session/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthSessionDelete operation.
     * @callback module:api/ApiApi~apiAuthSessionDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiAuthSessionDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthSessionDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthSessionDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/session/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthSessionUpdate operation.
     * @callback module:api/ApiApi~apiAuthSessionUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiAuthSessionUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthSessionUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiAuthSessionUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/session/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthSetnonspecifiedpasswordCreate operation.
     * @callback module:api/ApiApi~apiAuthSetnonspecifiedpasswordCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthSetnonspecifiedpasswordCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthSetnonspecifiedpasswordCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/setnonspecifiedpassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthSignupCreate operation.
     * @callback module:api/ApiApi~apiAuthSignupCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthSignupCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthSignupCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/signup/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiAuthUsernameexistsList operation.
     * @callback module:api/ApiApi~apiAuthUsernameexistsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiAuthUsernameexistsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiAuthUsernameexistsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/usernameexists', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksCreate operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookmarks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Bookmarks} data 
     * @param {module:api/ApiApi~apiBookmarksBookmarksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookmarks}
     */
    this.apiBookmarksBookmarksCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiBookmarksBookmarksCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bookmarks;

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksDelete operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this bookmark.
     * @param {module:api/ApiApi~apiBookmarksBookmarksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiBookmarksBookmarksDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiBookmarksBookmarksDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksList operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Bookmarks>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.contentnodeId 
     * @param {module:api/ApiApi~apiBookmarksBookmarksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Bookmarks>}
     */
    this.apiBookmarksBookmarksList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'contentnode_id': opts['contentnodeId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Bookmarks];

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksPartialUpdate operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookmarks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this bookmark.
     * @param {module:model/Bookmarks} data 
     * @param {module:api/ApiApi~apiBookmarksBookmarksPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookmarks}
     */
    this.apiBookmarksBookmarksPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiBookmarksBookmarksPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiBookmarksBookmarksPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bookmarks;

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksRead operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookmarks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this bookmark.
     * @param {module:api/ApiApi~apiBookmarksBookmarksReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookmarks}
     */
    this.apiBookmarksBookmarksRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiBookmarksBookmarksRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bookmarks;

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiBookmarksBookmarksUpdate operation.
     * @callback module:api/ApiApi~apiBookmarksBookmarksUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Bookmarks} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this bookmark.
     * @param {module:model/Bookmarks} data 
     * @param {module:api/ApiApi~apiBookmarksBookmarksUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Bookmarks}
     */
    this.apiBookmarksBookmarksUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiBookmarksBookmarksUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiBookmarksBookmarksUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Bookmarks;

      return this.apiClient.callApi(
        '/api/bookmarks/bookmarks/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentChannelFilterOptions operation.
     * @callback module:api/ApiApi~apiContentChannelFilterOptionsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelMetadataViewSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.available 
     * @param {String} opts.hasExercise 
     * @param {module:api/ApiApi~apiContentChannelFilterOptionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelMetadataViewSet>}
     */
    this.apiContentChannelFilterOptions = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'available': opts['available'],
        'has_exercise': opts['hasExercise'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChannelMetadataViewSet];

      return this.apiClient.callApi(
        '/api/content/channel/filter_options/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentChannelList operation.
     * @callback module:api/ApiApi~apiContentChannelListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ChannelMetadataViewSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.available 
     * @param {String} opts.hasExercise 
     * @param {module:api/ApiApi~apiContentChannelListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ChannelMetadataViewSet>}
     */
    this.apiContentChannelList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'available': opts['available'],
        'has_exercise': opts['hasExercise'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ChannelMetadataViewSet];

      return this.apiClient.callApi(
        '/api/content/channel/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentChannelRead operation.
     * @callback module:api/ApiApi~apiContentChannelReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ChannelMetadataViewSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentChannelReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ChannelMetadataViewSet}
     */
    this.apiContentChannelRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentChannelRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ChannelMetadataViewSet;

      return this.apiClient.callApi(
        '/api/content/channel/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeBookmarksList operation.
     * @callback module:api/ApiApi~apiContentContentnodeBookmarksListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2001} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.kind 
     * @param {String} opts.available 
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiContentContentnodeBookmarksListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2001}
     */
    this.apiContentContentnodeBookmarksList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'kind': opts['kind'],
        'available': opts['available'],
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/api/content/contentnode_bookmarks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeCopies operation.
     * @callback module:api/ApiApi~apiContentContentnodeCopiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns each nodes that has this content id, along with their ancestors.
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeCopiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeCopies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeCopies");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode/{id}/copies/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeCopiesCount operation.
     * @callback module:api/ApiApi~apiContentContentnodeCopiesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of node copies for each content id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeCopiesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeCopiesCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/copies_count/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeDescendants operation.
     * @callback module:api/ApiApi~apiContentContentnodeDescendantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a slim view all the descendants of a set of content nodes (as designated by the passed in ids). In addition to id, title, kind, and content_id, each node is also annotated with the ancestor_id of one of the ids that are passed into the request. In the case where a node has more than one ancestor in the set of content nodes requested, duplicates of that content node are returned, each annotated with one of the ancestor_ids for a node.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeDescendantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeDescendants = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/descendants/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeDescendantsAssessments operation.
     * @callback module:api/ApiApi~apiContentContentnodeDescendantsAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeDescendantsAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeDescendantsAssessments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/descendants_assessments/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeGranularRead operation.
     * @callback module:api/ApiApi~apiContentContentnodeGranularReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeGranularReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentContentnodeGranularRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeGranularRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/contentnode_granular/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeList operation.
     * @callback module:api/ApiApi~apiContentContentnodeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeNextContent operation.
     * @callback module:api/ApiApi~apiContentContentnodeNextContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeNextContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeNextContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeNextContent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode/{id}/next_content/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeNextSteps operation.
     * @callback module:api/ApiApi~apiContentContentnodeNextStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that has user completed content as a prerequisite, or leftward sibling.
     * :param request: request object :return: uncompleted content nodes, or empty queryset if user is anonymous
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeNextStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeNextSteps = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/next_steps/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeNodeAssessments operation.
     * @callback module:api/ApiApi~apiContentContentnodeNodeAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeNodeAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeNodeAssessments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/node_assessments/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodePopular operation.
     * @callback module:api/ApiApi~apiContentContentnodePopularCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that is popular with all users.
     * :param request: request object :return: 10 most popular content nodes
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodePopularCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodePopular = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/popular/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeRandom operation.
     * @callback module:api/ApiApi~apiContentContentnodeRandomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeRandomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeRandom = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/random/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeRead operation.
     * @callback module:api/ApiApi~apiContentContentnodeReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeRecommendationsFor operation.
     * @callback module:api/ApiApi~apiContentContentnodeRecommendationsForCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend items that are similar to this piece of content.
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeRecommendationsForCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeRecommendationsFor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeRecommendationsFor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode/{id}/recommendations_for/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeResume operation.
     * @callback module:api/ApiApi~apiContentContentnodeResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that the user has recently engaged with, but not finished.
     * :param request: request object :return: 10 most recently viewed content nodes
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeResume = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode/resume/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchCopies operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchCopiesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns each nodes that has this content id, along with their ancestors.
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeSearchCopiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeSearchCopies = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeSearchCopies");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/{id}/copies/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchCopiesCount operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchCopiesCountCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the number of node copies for each content id.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchCopiesCountCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchCopiesCount = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/copies_count/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchDescendants operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchDescendantsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a slim view all the descendants of a set of content nodes (as designated by the passed in ids). In addition to id, title, kind, and content_id, each node is also annotated with the ancestor_id of one of the ids that are passed into the request. In the case where a node has more than one ancestor in the set of content nodes requested, duplicates of that content node are returned, each annotated with one of the ancestor_ids for a node.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchDescendantsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchDescendants = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/descendants/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchDescendantsAssessments operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchDescendantsAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchDescendantsAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchDescendantsAssessments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/descendants_assessments/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchList operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchNextContent operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchNextContentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeSearchNextContentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeSearchNextContent = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeSearchNextContent");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/{id}/next_content/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchNextSteps operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchNextStepsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that has user completed content as a prerequisite, or leftward sibling.
     * :param request: request object :return: uncompleted content nodes, or empty queryset if user is anonymous
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchNextStepsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchNextSteps = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/next_steps/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchNodeAssessments operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchNodeAssessmentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchNodeAssessmentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchNodeAssessments = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/node_assessments/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchPopular operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchPopularCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that is popular with all users.
     * :param request: request object :return: 10 most popular content nodes
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchPopularCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchPopular = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/popular/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchRandom operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchRandomCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchRandomCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchRandom = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/random/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchRead operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeSearchReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeSearchRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeSearchRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchRecommendationsFor operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchRecommendationsForCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend items that are similar to this piece of content.
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeSearchRecommendationsForCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeViewset}
     */
    this.apiContentContentnodeSearchRecommendationsFor = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeSearchRecommendationsFor");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/{id}/recommendations_for/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeSearchResume operation.
     * @callback module:api/ApiApi~apiContentContentnodeSearchResumeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Recommend content that the user has recently engaged with, but not finished.
     * :param request: request object :return: 10 most recently viewed content nodes
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeSearchResumeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.apiContentContentnodeSearchResume = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/api/content/contentnode_search/resume/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeTreeRead operation.
     * @callback module:api/ApiApi~apiContentContentnodeTreeReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentNodeTreeViewset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A nested, paginated representation of the children and grandchildren of a specific node
     * GET parameters on request can be: depth - a value of either 1 or 2 indicating the depth to recurse the tree, either 1 or 2 levels if this parameter is missing it will default to 2. next__gt - a value to return child nodes with a lft value greater than this, if missing defaults to None  The pagination object returned for \"children\" will have this form: results - a list of serialized children, that can also have their own nested children attribute. more - a dictionary or None, if a dictionary, will have an id key that is the id of the parent object for these children, and a params key that is a dictionary of the required query parameters to query more children for this parent - at a minimum this will include next__gt and depth, but may also include other query parameters for filtering content nodes.  The \"more\" property describes the \"id\" required to do URL reversal on this endpoint, and the params that should be passed as query parameters to get the next set of results for pagination.  :param request: request object :param pk: id parent node :return: an object representing the parent with a pagination object as \"children\"
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeTreeReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentNodeTreeViewset}
     */
    this.apiContentContentnodeTreeRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeTreeRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ContentNodeTreeViewset;

      return this.apiClient.callApi(
        '/api/content/contentnode_tree/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeprogressList operation.
     * @callback module:api/ApiApi~apiContentContentnodeprogressListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.resume 
     * @param {String} opts.lesson 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentContentnodeprogressListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentContentnodeprogressList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'resume': opts['resume'],
        'lesson': opts['lesson'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/contentnodeprogress/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentContentnodeprogressTree operation.
     * @callback module:api/ApiApi~apiContentContentnodeprogressTreeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentContentnodeprogressTreeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentContentnodeprogressTree = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentContentnodeprogressTree");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/contentnodeprogress/{id}/tree/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentFileList operation.
     * @callback module:api/ApiApi~apiContentFileListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2002} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/ApiApi~apiContentFileListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2002}
     */
    this.apiContentFileList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2002;

      return this.apiClient.callApi(
        '/api/content/file/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentFileRead operation.
     * @callback module:api/ApiApi~apiContentFileReadCallback
     * @param {String} error Error message, if any.
     * @param {File} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentFileReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link File}
     */
    this.apiContentFileRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentFileRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = File;

      return this.apiClient.callApi(
        '/api/content/file/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentRemotechannelKolibriStudioStatus operation.
     * @callback module:api/ApiApi~apiContentRemotechannelKolibriStudioStatusCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiContentRemotechannelKolibriStudioStatusCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentRemotechannelKolibriStudioStatus = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/remotechannel/kolibri_studio_status/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentRemotechannelList operation.
     * @callback module:api/ApiApi~apiContentRemotechannelListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata about all public channels on kolibri studio.
     * @param {module:api/ApiApi~apiContentRemotechannelListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentRemotechannelList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/remotechannel/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentRemotechannelRead operation.
     * @callback module:api/ApiApi~apiContentRemotechannelReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets metadata about a channel through a token or channel id.
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentRemotechannelReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentRemotechannelRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentRemotechannelRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/remotechannel/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentRemotechannelRetrieveList operation.
     * @callback module:api/ApiApi~apiContentRemotechannelRetrieveListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiContentRemotechannelRetrieveListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiContentRemotechannelRetrieveList = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiContentRemotechannelRetrieveList");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/content/remotechannel/{id}/retrieve_list/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiContentUsercontentnodeList operation.
     * @callback module:api/ApiApi~apiContentUsercontentnodeListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2003} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A content node viewset for filtering on user specific fields.
     * @param {Object} opts Optional parameters
     * @param {String} opts.parent 
     * @param {String} opts.parentIsnull 
     * @param {String} opts.prerequisiteFor 
     * @param {String} opts.hasPrerequisite 
     * @param {String} opts.related 
     * @param {String} opts.excludeContentIds 
     * @param {String} opts.ids 
     * @param {String} opts.contentId 
     * @param {String} opts.channelId 
     * @param {String} opts.kind 
     * @param {String} opts.includeCoachContent 
     * @param {String} opts.kindIn 
     * @param {String} opts.containsQuiz 
     * @param {String} opts.gradeLevels 
     * @param {String} opts.resourceTypes 
     * @param {String} opts.learningActivities 
     * @param {String} opts.accessibilityLabels 
     * @param {String} opts.categories 
     * @param {String} opts.learnerNeeds 
     * @param {String} opts.keywords 
     * @param {String} opts.channels Multiple values may be separated by commas.
     * @param {String} opts.languages Multiple values may be separated by commas.
     * @param {Number} opts.treeId 
     * @param {Number} opts.lftGt 
     * @param {Number} opts.rghtLt 
     * @param {String} opts.resume 
     * @param {String} opts.lesson 
     * @param {String} opts.categoriesIsnull 
     * @param {String} opts.authors 
     * @param {String} opts.tags 
     * @param {String} opts.descendantOf 
     * @param {String} opts.cursor The pagination cursor value.
     * @param {Number} opts.maxResults Number of results to return per page.
     * @param {module:api/ApiApi~apiContentUsercontentnodeListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2003}
     */
    this.apiContentUsercontentnodeList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'parent': opts['parent'],
        'parent__isnull': opts['parentIsnull'],
        'prerequisite_for': opts['prerequisiteFor'],
        'has_prerequisite': opts['hasPrerequisite'],
        'related': opts['related'],
        'exclude_content_ids': opts['excludeContentIds'],
        'ids': opts['ids'],
        'content_id': opts['contentId'],
        'channel_id': opts['channelId'],
        'kind': opts['kind'],
        'include_coach_content': opts['includeCoachContent'],
        'kind_in': opts['kindIn'],
        'contains_quiz': opts['containsQuiz'],
        'grade_levels': opts['gradeLevels'],
        'resource_types': opts['resourceTypes'],
        'learning_activities': opts['learningActivities'],
        'accessibility_labels': opts['accessibilityLabels'],
        'categories': opts['categories'],
        'learner_needs': opts['learnerNeeds'],
        'keywords': opts['keywords'],
        'channels': opts['channels'],
        'languages': opts['languages'],
        'tree_id': opts['treeId'],
        'lft__gt': opts['lftGt'],
        'rght__lt': opts['rghtLt'],
        'resume': opts['resume'],
        'lesson': opts['lesson'],
        'categories__isnull': opts['categoriesIsnull'],
        'authors': opts['authors'],
        'tags': opts['tags'],
        'descendant_of': opts['descendantOf'],
        'cursor': opts['cursor'],
        'max_results': opts['maxResults'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2003;

      return this.apiClient.callApi(
        '/api/content/usercontentnode/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDeviceinfoList operation.
     * @callback module:api/ApiApi~apiDeviceDeviceinfoListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDeviceinfoListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDeviceinfoList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/deviceinfo/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicenameList operation.
     * @callback module:api/ApiApi~apiDeviceDevicenameListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDevicenameListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDevicenameList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/devicename/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicenamePartialUpdate operation.
     * @callback module:api/ApiApi~apiDeviceDevicenamePartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDevicenamePartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDevicenamePartialUpdate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/devicename/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsCreate operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicePermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/DevicePermissions} data 
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicePermissions}
     */
    this.apiDeviceDevicepermissionsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDeviceDevicepermissionsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DevicePermissions;

      return this.apiClient.callApi(
        '/api/device/devicepermissions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsDelete operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} user A unique value identifying this device permissions.
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDevicepermissionsDelete = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiDeviceDevicepermissionsDelete");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/devicepermissions/{user}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsList operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/DevicePermissions>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/DevicePermissions>}
     */
    this.apiDeviceDevicepermissionsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [DevicePermissions];

      return this.apiClient.callApi(
        '/api/device/devicepermissions/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsPartialUpdate operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicePermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} user A unique value identifying this device permissions.
     * @param {module:model/DevicePermissions} data 
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicePermissions}
     */
    this.apiDeviceDevicepermissionsPartialUpdate = function(user, data, callback) {
      var postBody = data;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiDeviceDevicepermissionsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDeviceDevicepermissionsPartialUpdate");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DevicePermissions;

      return this.apiClient.callApi(
        '/api/device/devicepermissions/{user}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsRead operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicePermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} user A unique value identifying this device permissions.
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicePermissions}
     */
    this.apiDeviceDevicepermissionsRead = function(user, callback) {
      var postBody = null;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiDeviceDevicepermissionsRead");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DevicePermissions;

      return this.apiClient.callApi(
        '/api/device/devicepermissions/{user}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicepermissionsUpdate operation.
     * @callback module:api/ApiApi~apiDeviceDevicepermissionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DevicePermissions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} user A unique value identifying this device permissions.
     * @param {module:model/DevicePermissions} data 
     * @param {module:api/ApiApi~apiDeviceDevicepermissionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DevicePermissions}
     */
    this.apiDeviceDevicepermissionsUpdate = function(user, data, callback) {
      var postBody = data;

      // verify the required parameter 'user' is set
      if (user === undefined || user === null) {
        throw new Error("Missing the required parameter 'user' when calling apiDeviceDevicepermissionsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDeviceDevicepermissionsUpdate");
      }


      var pathParams = {
        'user': user
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DevicePermissions;

      return this.apiClient.callApi(
        '/api/device/devicepermissions/{user}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDeviceprovisionCreate operation.
     * @callback module:api/ApiApi~apiDeviceDeviceprovisionCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeviceProvision} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/DeviceProvision} data 
     * @param {module:api/ApiApi~apiDeviceDeviceprovisionCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeviceProvision}
     */
    this.apiDeviceDeviceprovisionCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDeviceDeviceprovisionCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DeviceProvision;

      return this.apiClient.callApi(
        '/api/device/deviceprovision/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicesettingsList operation.
     * @callback module:api/ApiApi~apiDeviceDevicesettingsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDevicesettingsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDevicesettingsList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/devicesettings/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceDevicesettingsPartialUpdate operation.
     * @callback module:api/ApiApi~apiDeviceDevicesettingsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceDevicesettingsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceDevicesettingsPartialUpdate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/devicesettings/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceFreespaceList operation.
     * @callback module:api/ApiApi~apiDeviceFreespaceListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiDeviceFreespaceListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDeviceFreespaceList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/device/freespace/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceUsersyncstatusList operation.
     * @callback module:api/ApiApi~apiDeviceUsersyncstatusListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/UserSyncStatusViewSet>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.user 
     * @param {String} opts.memberOf 
     * @param {module:api/ApiApi~apiDeviceUsersyncstatusListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/UserSyncStatusViewSet>}
     */
    this.apiDeviceUsersyncstatusList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'user': opts['user'],
        'member_of': opts['memberOf'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [UserSyncStatusViewSet];

      return this.apiClient.callApi(
        '/api/device/usersyncstatus/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDeviceUsersyncstatusRead operation.
     * @callback module:api/ApiApi~apiDeviceUsersyncstatusReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserSyncStatusViewSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this user sync status.
     * @param {module:api/ApiApi~apiDeviceUsersyncstatusReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserSyncStatusViewSet}
     */
    this.apiDeviceUsersyncstatusRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDeviceUsersyncstatusRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = UserSyncStatusViewSet;

      return this.apiClient.callApi(
        '/api/device/usersyncstatus/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationCreate operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryDynamicnetworklocationCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryDynamicnetworklocationCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationDelete operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this dynamic network location.
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDiscoveryDynamicnetworklocationDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryDynamicnetworklocationDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationList operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkLocation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.subsetOfUsersDevice 
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkLocation>}
     */
    this.apiDiscoveryDynamicnetworklocationList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subset_of_users_device': opts['subsetOfUsersDevice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NetworkLocation];

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationPartialUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this dynamic network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryDynamicnetworklocationPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryDynamicnetworklocationPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryDynamicnetworklocationPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationRead operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this dynamic network location.
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryDynamicnetworklocationRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryDynamicnetworklocationRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryDynamicnetworklocationUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryDynamicnetworklocationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this dynamic network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryDynamicnetworklocationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryDynamicnetworklocationUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryDynamicnetworklocationUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryDynamicnetworklocationUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/dynamicnetworklocation/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationCreate operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryNetworklocationCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryNetworklocationCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/networklocation/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationDelete operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this network location.
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDiscoveryNetworklocationDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryNetworklocationDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/discovery/networklocation/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationFacilitiesRead operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationFacilitiesReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a NetworkLocation ID, returns a list of Facilities that are on that NetworkLocation, for the purposes of syncing
     * @param {String} id 
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationFacilitiesReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDiscoveryNetworklocationFacilitiesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryNetworklocationFacilitiesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/discovery/networklocation_facilities/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationList operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkLocation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.subsetOfUsersDevice 
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkLocation>}
     */
    this.apiDiscoveryNetworklocationList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subset_of_users_device': opts['subsetOfUsersDevice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NetworkLocation];

      return this.apiClient.callApi(
        '/api/discovery/networklocation/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationPartialUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryNetworklocationPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryNetworklocationPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryNetworklocationPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/networklocation/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationRead operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this network location.
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryNetworklocationRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryNetworklocationRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/networklocation/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryNetworklocationUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryNetworklocationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryNetworklocationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryNetworklocationUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryNetworklocationUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryNetworklocationUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/networklocation/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationCreate operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryStaticnetworklocationCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryStaticnetworklocationCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationDelete operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this static network location.
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiDiscoveryStaticnetworklocationDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryStaticnetworklocationDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationList operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/NetworkLocation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.subsetOfUsersDevice 
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/NetworkLocation>}
     */
    this.apiDiscoveryStaticnetworklocationList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'subset_of_users_device': opts['subsetOfUsersDevice'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [NetworkLocation];

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationPartialUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this static network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryStaticnetworklocationPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryStaticnetworklocationPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryStaticnetworklocationPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationRead operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this static network location.
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryStaticnetworklocationRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryStaticnetworklocationRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiDiscoveryStaticnetworklocationUpdate operation.
     * @callback module:api/ApiApi~apiDiscoveryStaticnetworklocationUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NetworkLocation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this static network location.
     * @param {module:model/NetworkLocation} data 
     * @param {module:api/ApiApi~apiDiscoveryStaticnetworklocationUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NetworkLocation}
     */
    this.apiDiscoveryStaticnetworklocationUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiDiscoveryStaticnetworklocationUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiDiscoveryStaticnetworklocationUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = NetworkLocation;

      return this.apiClient.callApi(
        '/api/discovery/staticnetworklocation/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamCreate operation.
     * @callback module:api/ApiApi~apiExamsExamCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Exam} data 
     * @param {module:api/ApiApi~apiExamsExamCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exam}
     */
    this.apiExamsExamCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiExamsExamCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/api/exams/exam/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamDelete operation.
     * @callback module:api/ApiApi~apiExamsExamDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiExamsExamDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiExamsExamDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiExamsExamDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/exams/exam/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamList operation.
     * @callback module:api/ApiApi~apiExamsExamListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2004} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.collection 
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/ApiApi~apiExamsExamListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2004}
     */
    this.apiExamsExamList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'collection': opts['collection'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2004;

      return this.apiClient.callApi(
        '/api/exams/exam/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamPartialUpdate operation.
     * @callback module:api/ApiApi~apiExamsExamPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Exam} data 
     * @param {module:api/ApiApi~apiExamsExamPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exam}
     */
    this.apiExamsExamPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiExamsExamPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiExamsExamPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/api/exams/exam/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamRead operation.
     * @callback module:api/ApiApi~apiExamsExamReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiExamsExamReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exam}
     */
    this.apiExamsExamRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiExamsExamRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/api/exams/exam/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiExamsExamUpdate operation.
     * @callback module:api/ApiApi~apiExamsExamUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Exam} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/Exam} data 
     * @param {module:api/ApiApi~apiExamsExamUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Exam}
     */
    this.apiExamsExamUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiExamsExamUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiExamsExamUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Exam;

      return this.apiClient.callApi(
        '/api/exams/exam/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonCreate operation.
     * @callback module:api/ApiApi~apiLessonsLessonCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lesson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Lesson} data 
     * @param {module:api/ApiApi~apiLessonsLessonCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lesson}
     */
    this.apiLessonsLessonCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiLessonsLessonCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lesson;

      return this.apiClient.callApi(
        '/api/lessons/lesson/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonDelete operation.
     * @callback module:api/ApiApi~apiLessonsLessonDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this lesson.
     * @param {module:api/ApiApi~apiLessonsLessonDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiLessonsLessonDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLessonsLessonDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/lessons/lesson/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonList operation.
     * @callback module:api/ApiApi~apiLessonsLessonListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lesson>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.collection 
     * @param {module:api/ApiApi~apiLessonsLessonListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lesson>}
     */
    this.apiLessonsLessonList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'collection': opts['collection'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Lesson];

      return this.apiClient.callApi(
        '/api/lessons/lesson/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonPartialUpdate operation.
     * @callback module:api/ApiApi~apiLessonsLessonPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lesson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this lesson.
     * @param {module:model/Lesson} data 
     * @param {module:api/ApiApi~apiLessonsLessonPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lesson}
     */
    this.apiLessonsLessonPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLessonsLessonPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiLessonsLessonPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lesson;

      return this.apiClient.callApi(
        '/api/lessons/lesson/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonRead operation.
     * @callback module:api/ApiApi~apiLessonsLessonReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lesson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this lesson.
     * @param {module:api/ApiApi~apiLessonsLessonReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lesson}
     */
    this.apiLessonsLessonRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLessonsLessonRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lesson;

      return this.apiClient.callApi(
        '/api/lessons/lesson/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLessonsLessonUpdate operation.
     * @callback module:api/ApiApi~apiLessonsLessonUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Lesson} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this lesson.
     * @param {module:model/Lesson} data 
     * @param {module:api/ApiApi~apiLessonsLessonUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Lesson}
     */
    this.apiLessonsLessonUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLessonsLessonUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiLessonsLessonUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Lesson;

      return this.apiClient.callApi(
        '/api/lessons/lesson/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerAttemptlogList operation.
     * @callback module:api/ApiApi~apiLoggerAttemptlogListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2005} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.masterylog 
     * @param {String} opts.complete 
     * @param {String} opts.user 
     * @param {String} opts.content 
     * @param {String} opts.item 
     * @param {String} opts.facility 
     * @param {String} opts.classroom 
     * @param {String} opts.learnerGroup 
     * @param {String} opts.ordering Which field to use when ordering the results.
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/ApiApi~apiLoggerAttemptlogListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2005}
     */
    this.apiLoggerAttemptlogList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'masterylog': opts['masterylog'],
        'complete': opts['complete'],
        'user': opts['user'],
        'content': opts['content'],
        'item': opts['item'],
        'facility': opts['facility'],
        'classroom': opts['classroom'],
        'learner_group': opts['learnerGroup'],
        'ordering': opts['ordering'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2005;

      return this.apiClient.callApi(
        '/api/logger/attemptlog/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerAttemptlogRead operation.
     * @callback module:api/ApiApi~apiLoggerAttemptlogReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AttemptLogViewSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this attempt log.
     * @param {module:api/ApiApi~apiLoggerAttemptlogReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AttemptLogViewSet}
     */
    this.apiLoggerAttemptlogRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLoggerAttemptlogRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = AttemptLogViewSet;

      return this.apiClient.callApi(
        '/api/logger/attemptlog/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerMasterylogList operation.
     * @callback module:api/ApiApi~apiLoggerMasterylogListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {String} opts.content 
     * @param {String} opts.facility 
     * @param {String} opts.classroom 
     * @param {String} opts.learnerGroup 
     * @param {Number} opts.page A page number within the paginated result set.
     * @param {Number} opts.pageSize Number of results to return per page.
     * @param {module:api/ApiApi~apiLoggerMasterylogListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    this.apiLoggerMasterylogList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'content': opts['content'],
        'facility': opts['facility'],
        'classroom': opts['classroom'],
        'learner_group': opts['learnerGroup'],
        'page': opts['page'],
        'page_size': opts['pageSize'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2006;

      return this.apiClient.callApi(
        '/api/logger/masterylog/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerMasterylogRead operation.
     * @callback module:api/ApiApi~apiLoggerMasterylogReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MasteryLogViewSet} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this mastery log.
     * @param {module:api/ApiApi~apiLoggerMasterylogReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MasteryLogViewSet}
     */
    this.apiLoggerMasterylogRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLoggerMasterylogRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = MasteryLogViewSet;

      return this.apiClient.callApi(
        '/api/logger/masterylog/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerTrackprogressCreate operation.
     * @callback module:api/ApiApi~apiLoggerTrackprogressCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a POST request to start a content session.
     * Requires one of either: - node_id: the pk of the resource - quiz_id: the pk of the quiz (Exam) object  Optional parameters: - repeat: whether to reset previous progress on this content to zero and start fresh - lesson_id: if this is being engaged within a lesson  Returns object with properties: - session_id: id of the session object that was created by this call - context: contains node_id, quiz_id, lesson_id, and mastery_level as appropriate - progress: any previous progress on this content resource - time_spent: any previous time spent on this content resource - extra_fields: any previously recorded additional data stored for this resource - complete: whether this resource is completed by this user  If this is an assessment, return object will also include: - mastery_criterion: mastery criterion that should be applied to determine completion - pastattempts: serialized subset of recent responses, used to determine completion - totalattempts: total number of previous responses within this run of the assessment resource
     * @param {module:api/ApiApi~apiLoggerTrackprogressCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiLoggerTrackprogressCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/logger/trackprogress/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerTrackprogressUpdate operation.
     * @callback module:api/ApiApi~apiLoggerTrackprogressUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Make a PUT request to update the current session
     * Requires one of either: - progress_delta: increase the progress by this amount - progress: set the progress to this amount  Can also update time spent recorded with a delta: - time_spent_delta: number of seconds to increase time_spent by  And update the extra_fields value stored: - extra_fields: the complete representation to set extra_fields to  If creating or updating attempts for an assessment must include: - interactions: an array of objects, if updating an existing attempt, must include attempt_id  Returns an object with the properties: - complete: boolean indicating if the resource is completed  If an attempt at an assessment was included, then this parameter will be included: - attempts: serialized form of the attempt, equivalent to that returned in pastattempts from           session initialization
     * @param {String} id 
     * @param {module:api/ApiApi~apiLoggerTrackprogressUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiLoggerTrackprogressUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLoggerTrackprogressUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/logger/trackprogress/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiLoggerUserprogressRead operation.
     * @callback module:api/ApiApi~apiLoggerUserprogressReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiLoggerUserprogressReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiLoggerUserprogressRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiLoggerUserprogressRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/logger/userprogress/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1BuffersCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1BuffersCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Buffer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Buffer} data 
     * @param {module:api/ApiApi~apiMorangoV1BuffersCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Buffer}
     */
    this.apiMorangoV1BuffersCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1BuffersCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/gzip', 'application/json'];
      var accepts = ['application/json'];
      var returnType = Buffer;

      return this.apiClient.callApi(
        '/api/morango/v1/buffers/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1BuffersList operation.
     * @callback module:api/ApiApi~apiMorangoV1BuffersListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2007} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit Number of results to return per page.
     * @param {Number} opts.offset The initial index from which to return the results.
     * @param {module:api/ApiApi~apiMorangoV1BuffersListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2007}
     */
    this.apiMorangoV1BuffersList = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/gzip', 'application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse2007;

      return this.apiClient.callApi(
        '/api/morango/v1/buffers/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1CertificatechainCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1CertificatechainCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiMorangoV1CertificatechainCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiMorangoV1CertificatechainCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/morango/v1/certificatechain/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1CertificatesCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1CertificatesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Certificate} data 
     * @param {module:api/ApiApi~apiMorangoV1CertificatesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    this.apiMorangoV1CertificatesCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1CertificatesCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificate;

      return this.apiClient.callApi(
        '/api/morango/v1/certificates/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1CertificatesList operation.
     * @callback module:api/ApiApi~apiMorangoV1CertificatesListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Certificate>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiMorangoV1CertificatesListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Certificate>}
     */
    this.apiMorangoV1CertificatesList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [Certificate];

      return this.apiClient.callApi(
        '/api/morango/v1/certificates/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1CertificatesRead operation.
     * @callback module:api/ApiApi~apiMorangoV1CertificatesReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Certificate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1CertificatesReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Certificate}
     */
    this.apiMorangoV1CertificatesRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1CertificatesRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Certificate;

      return this.apiClient.callApi(
        '/api/morango/v1/certificates/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1MorangoinfoRead operation.
     * @callback module:api/ApiApi~apiMorangoV1MorangoinfoReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1MorangoinfoReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiMorangoV1MorangoinfoRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1MorangoinfoRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/morango/v1/morangoinfo/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1NoncesCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1NoncesCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Nonce} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/Nonce} data 
     * @param {module:api/ApiApi~apiMorangoV1NoncesCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Nonce}
     */
    this.apiMorangoV1NoncesCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1NoncesCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = Nonce;

      return this.apiClient.callApi(
        '/api/morango/v1/nonces/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1PublickeyList operation.
     * @callback module:api/ApiApi~apiMorangoV1PublickeyListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SharedKey>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiMorangoV1PublickeyListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SharedKey>}
     */
    this.apiMorangoV1PublickeyList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [SharedKey];

      return this.apiClient.callApi(
        '/api/morango/v1/publickey/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1PublickeyRead operation.
     * @callback module:api/ApiApi~apiMorangoV1PublickeyReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SharedKey} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1PublickeyReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SharedKey}
     */
    this.apiMorangoV1PublickeyRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1PublickeyRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SharedKey;

      return this.apiClient.callApi(
        '/api/morango/v1/publickey/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1SyncsessionsCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1SyncsessionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/SyncSession} data 
     * @param {module:api/ApiApi~apiMorangoV1SyncsessionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncSession}
     */
    this.apiMorangoV1SyncsessionsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1SyncsessionsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SyncSession;

      return this.apiClient.callApi(
        '/api/morango/v1/syncsessions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1SyncsessionsDelete operation.
     * @callback module:api/ApiApi~apiMorangoV1SyncsessionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1SyncsessionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiMorangoV1SyncsessionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1SyncsessionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/morango/v1/syncsessions/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1SyncsessionsRead operation.
     * @callback module:api/ApiApi~apiMorangoV1SyncsessionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SyncSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1SyncsessionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SyncSession}
     */
    this.apiMorangoV1SyncsessionsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1SyncsessionsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = SyncSession;

      return this.apiClient.callApi(
        '/api/morango/v1/syncsessions/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1TransfersessionsCreate operation.
     * @callback module:api/ApiApi~apiMorangoV1TransfersessionsCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/TransferSession} data 
     * @param {module:api/ApiApi~apiMorangoV1TransfersessionsCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSession}
     */
    this.apiMorangoV1TransfersessionsCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1TransfersessionsCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransferSession;

      return this.apiClient.callApi(
        '/api/morango/v1/transfersessions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1TransfersessionsDelete operation.
     * @callback module:api/ApiApi~apiMorangoV1TransfersessionsDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1TransfersessionsDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiMorangoV1TransfersessionsDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1TransfersessionsDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/morango/v1/transfersessions/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1TransfersessionsPartialUpdate operation.
     * @callback module:api/ApiApi~apiMorangoV1TransfersessionsPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/TransferSession} data 
     * @param {module:api/ApiApi~apiMorangoV1TransfersessionsPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSession}
     */
    this.apiMorangoV1TransfersessionsPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1TransfersessionsPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1TransfersessionsPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransferSession;

      return this.apiClient.callApi(
        '/api/morango/v1/transfersessions/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1TransfersessionsRead operation.
     * @callback module:api/ApiApi~apiMorangoV1TransfersessionsReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiMorangoV1TransfersessionsReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSession}
     */
    this.apiMorangoV1TransfersessionsRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1TransfersessionsRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransferSession;

      return this.apiClient.callApi(
        '/api/morango/v1/transfersessions/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiMorangoV1TransfersessionsUpdate operation.
     * @callback module:api/ApiApi~apiMorangoV1TransfersessionsUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TransferSession} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:model/TransferSession} data 
     * @param {module:api/ApiApi~apiMorangoV1TransfersessionsUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TransferSession}
     */
    this.apiMorangoV1TransfersessionsUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiMorangoV1TransfersessionsUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiMorangoV1TransfersessionsUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = TransferSession;

      return this.apiClient.callApi(
        '/api/morango/v1/transfersessions/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationList operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PingbackNotification>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PingbackNotification>}
     */
    this.apiNotificationsPingbacknotificationList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PingbackNotification];

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotification/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationRead operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingbackNotification} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingbackNotification}
     */
    this.apiNotificationsPingbacknotificationRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotificationsPingbacknotificationRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PingbackNotification;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotification/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedCreate operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedCreateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingbackNotificationDismissed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:model/PingbackNotificationDismissed} data 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedCreateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingbackNotificationDismissed}
     */
    this.apiNotificationsPingbacknotificationdismissedCreate = function(data, callback) {
      var postBody = data;

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiNotificationsPingbacknotificationdismissedCreate");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PingbackNotificationDismissed;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedDelete operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this pingback notification dismissed.
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiNotificationsPingbacknotificationdismissedDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotificationsPingbacknotificationdismissedDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedList operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PingbackNotificationDismissed>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PingbackNotificationDismissed>}
     */
    this.apiNotificationsPingbacknotificationdismissedList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PingbackNotificationDismissed];

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedPartialUpdate operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedPartialUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingbackNotificationDismissed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this pingback notification dismissed.
     * @param {module:model/PingbackNotificationDismissed} data 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedPartialUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingbackNotificationDismissed}
     */
    this.apiNotificationsPingbacknotificationdismissedPartialUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotificationsPingbacknotificationdismissedPartialUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiNotificationsPingbacknotificationdismissedPartialUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PingbackNotificationDismissed;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/{id}/', 'PATCH',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedRead operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingbackNotificationDismissed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this pingback notification dismissed.
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingbackNotificationDismissed}
     */
    this.apiNotificationsPingbacknotificationdismissedRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotificationsPingbacknotificationdismissedRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PingbackNotificationDismissed;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiNotificationsPingbacknotificationdismissedUpdate operation.
     * @callback module:api/ApiApi~apiNotificationsPingbacknotificationdismissedUpdateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PingbackNotificationDismissed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {Number} id A unique integer value identifying this pingback notification dismissed.
     * @param {module:model/PingbackNotificationDismissed} data 
     * @param {module:api/ApiApi~apiNotificationsPingbacknotificationdismissedUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PingbackNotificationDismissed}
     */
    this.apiNotificationsPingbacknotificationdismissedUpdate = function(id, data, callback) {
      var postBody = data;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiNotificationsPingbacknotificationdismissedUpdate");
      }

      // verify the required parameter 'data' is set
      if (data === undefined || data === null) {
        throw new Error("Missing the required parameter 'data' when calling apiNotificationsPingbacknotificationdismissedUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PingbackNotificationDismissed;

      return this.apiClient.callApi(
        '/api/notifications/pingbacknotificationdismissed/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicChannelsList operation.
     * @callback module:api/ApiApi~apiPublicChannelsListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} version 
     * @param {module:api/ApiApi~apiPublicChannelsListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiPublicChannelsList = function(version, callback) {
      var postBody = null;

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiPublicChannelsList");
      }


      var pathParams = {
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/public/{version}/channels', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicChannelsLookupList operation.
     * @callback module:api/ApiApi~apiPublicChannelsLookupListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} identifier 
     * @param {String} version 
     * @param {module:api/ApiApi~apiPublicChannelsLookupListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiPublicChannelsLookupList = function(identifier, version, callback) {
      var postBody = null;

      // verify the required parameter 'identifier' is set
      if (identifier === undefined || identifier === null) {
        throw new Error("Missing the required parameter 'identifier' when calling apiPublicChannelsLookupList");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling apiPublicChannelsLookupList");
      }


      var pathParams = {
        'identifier': identifier,
        'version': version
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/public/{version}/channels/lookup/(P{identifier}[/]+)', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicFacilityuserList operation.
     * @callback module:api/ApiApi~apiPublicFacilityuserListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicFacilityUser>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiPublicFacilityuserListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicFacilityUser>}
     */
    this.apiPublicFacilityuserList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PublicFacilityUser];

      return this.apiClient.callApi(
        '/api/public/facilityuser/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicFacilityuserRead operation.
     * @callback module:api/ApiApi~apiPublicFacilityuserReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFacilityUser} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility user.
     * @param {module:api/ApiApi~apiPublicFacilityuserReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFacilityUser}
     */
    this.apiPublicFacilityuserRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPublicFacilityuserRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFacilityUser;

      return this.apiClient.callApi(
        '/api/public/facilityuser/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicInfoList operation.
     * @callback module:api/ApiApi~apiPublicInfoListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns metadata information about the device
     * @param {module:api/ApiApi~apiPublicInfoListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiPublicInfoList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/public/info/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicSyncqueueCreate operation.
     * @callback module:api/ApiApi~apiPublicSyncqueueCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiPublicSyncqueueCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiPublicSyncqueueCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/public/syncqueue/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicSyncqueueUpdate operation.
     * @callback module:api/ApiApi~apiPublicSyncqueueUpdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiPublicSyncqueueUpdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiPublicSyncqueueUpdate = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPublicSyncqueueUpdate");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/public/syncqueue/{id}/', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1FacilityList operation.
     * @callback module:api/ApiApi~apiPublicV1FacilityListCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PublicFacility>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiPublicV1FacilityListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PublicFacility>}
     */
    this.apiPublicV1FacilityList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [PublicFacility];

      return this.apiClient.callApi(
        '/api/public/v1/facility/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPublicV1FacilityRead operation.
     * @callback module:api/ApiApi~apiPublicV1FacilityReadCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PublicFacility} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id A unique value identifying this facility.
     * @param {module:api/ApiApi~apiPublicV1FacilityReadCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PublicFacility}
     */
    this.apiPublicV1FacilityRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiPublicV1FacilityRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = PublicFacility;

      return this.apiClient.callApi(
        '/api/public/v1/facility/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksCanceltask operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksCanceltaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task with its task id given in the task_id parameter.
     * @param {module:api/ApiApi~apiTasksFacilitytasksCanceltaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksCanceltask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/canceltask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksCleartask operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksCleartaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksFacilitytasksCleartaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksCleartask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/cleartask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksCleartasks operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksCleartasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels all running tasks.
     * @param {module:api/ApiApi~apiTasksFacilitytasksCleartasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksCleartasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/cleartasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksCreate operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a task for async processing.
     * API endpoint:     POST /api/tasks/  Request payload parameters:     - `task` (required): a string representing the dotted path to task function.     - all other key value pairs are passed to the validator if the       task function has one otherwise they are passed to the task function itself       as keyword args.  Keep in mind:     If a task function has a validator then dict returned by the validator     is passed to the task function as keyword args.      The validator can add `extra_metadata` in the returning dict to set `extra_metadata`     in the enqueued task.
     * @param {module:api/ApiApi~apiTasksFacilitytasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksDelete operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiTasksFacilitytasksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTasksFacilitytasksDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksDeletefinishedtasks operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksDeletefinishedtasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all tasks that have succeeded, failed, or been cancelled.
     * @param {module:api/ApiApi~apiTasksFacilitytasksDeletefinishedtasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksDeletefinishedtasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/deletefinishedtasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksList operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksFacilitytasksListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksRead operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiTasksFacilitytasksReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTasksFacilitytasksRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksRestarttask operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksRestarttaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a task with its task id given in the task_id parameter.
     * @param {module:api/ApiApi~apiTasksFacilitytasksRestarttaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksRestarttask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/restarttask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksStartdataportalbulksync operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksStartdataportalbulksyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a PUSH sync with Kolibri Data Portal for ALL registered facilities.
     * @param {module:api/ApiApi~apiTasksFacilitytasksStartdataportalbulksyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksStartdataportalbulksync = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/startdataportalbulksync/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksStartdataportalsync operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksStartdataportalsyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a PUSH sync with Kolibri Data Portal.
     * @param {module:api/ApiApi~apiTasksFacilitytasksStartdataportalsyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksStartdataportalsync = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/startdataportalsync/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksStartdeletefacility operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksStartdeletefacilityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a task to delete a facility
     * @param {module:api/ApiApi~apiTasksFacilitytasksStartdeletefacilityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksStartdeletefacility = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/startdeletefacility/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksStartpeerfacilityimport operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksStartpeerfacilityimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a PULL of a specific facility from another device.
     * @param {module:api/ApiApi~apiTasksFacilitytasksStartpeerfacilityimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksStartpeerfacilityimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/startpeerfacilityimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksFacilitytasksStartpeerfacilitysync operation.
     * @callback module:api/ApiApi~apiTasksFacilitytasksStartpeerfacilitysyncCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a SYNC (PULL + PUSH) of a specific facility from another device.
     * @param {module:api/ApiApi~apiTasksFacilitytasksStartpeerfacilitysyncCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksFacilitytasksStartpeerfacilitysync = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/facilitytasks/startpeerfacilitysync/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksCanceltask operation.
     * @callback module:api/ApiApi~apiTasksTasksCanceltaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task with its task id given in the task_id parameter.
     * @param {module:api/ApiApi~apiTasksTasksCanceltaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksCanceltask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/canceltask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksChanneldiffstats operation.
     * @callback module:api/ApiApi~apiTasksTasksChanneldiffstatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksChanneldiffstatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksChanneldiffstats = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/channeldiffstats/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksCleartask operation.
     * @callback module:api/ApiApi~apiTasksTasksCleartaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksCleartaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksCleartask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/cleartask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksCleartasks operation.
     * @callback module:api/ApiApi~apiTasksTasksCleartasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels all running tasks.
     * @param {module:api/ApiApi~apiTasksTasksCleartasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksCleartasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/cleartasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksCreate operation.
     * @callback module:api/ApiApi~apiTasksTasksCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a task for async processing.
     * API endpoint:     POST /api/tasks/  Request payload parameters:     - `task` (required): a string representing the dotted path to task function.     - all other key value pairs are passed to the validator if the       task function has one otherwise they are passed to the task function itself       as keyword args.  Keep in mind:     If a task function has a validator then dict returned by the validator     is passed to the task function as keyword args.      The validator can add `extra_metadata` in the returning dict to set `extra_metadata`     in the enqueued task.
     * @param {module:api/ApiApi~apiTasksTasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksDelete operation.
     * @callback module:api/ApiApi~apiTasksTasksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiTasksTasksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTasksTasksDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksDeletefinishedtasks operation.
     * @callback module:api/ApiApi~apiTasksTasksDeletefinishedtasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all tasks that have succeeded, failed, or been cancelled.
     * @param {module:api/ApiApi~apiTasksTasksDeletefinishedtasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksDeletefinishedtasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/deletefinishedtasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksExportuserstocsv operation.
     * @callback module:api/ApiApi~apiTasksTasksExportuserstocsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export users, classes, roles and roles assignemnts to a csv file.
     * :param: facility_id :returns: An object with the job information
     * @param {module:api/ApiApi~apiTasksTasksExportuserstocsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksExportuserstocsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/exportuserstocsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksImportusersfromcsv operation.
     * @callback module:api/ApiApi~apiTasksTasksImportusersfromcsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import users, classes, roles and roles assignemnts from a csv file. :param: FILE: file dictionary with the file object :param: csvfile: filename of the file stored in kolibri temp folder :param: dryrun: validate the data but don't modify the database :param: delete: Users not in the csv will be deleted from the facility, and classes cleared :returns: An object with the job information
     * @param {module:api/ApiApi~apiTasksTasksImportusersfromcsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksImportusersfromcsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/importusersfromcsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksList operation.
     * @callback module:api/ApiApi~apiTasksTasksListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksLocaldrive operation.
     * @callback module:api/ApiApi~apiTasksTasksLocaldriveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksLocaldriveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksLocaldrive = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/localdrive/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksRead operation.
     * @callback module:api/ApiApi~apiTasksTasksReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {String} id 
     * @param {module:api/ApiApi~apiTasksTasksReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiTasksTasksRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksRestarttask operation.
     * @callback module:api/ApiApi~apiTasksTasksRestarttaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a task with its task id given in the task_id parameter.
     * @param {module:api/ApiApi~apiTasksTasksRestarttaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksRestarttask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/restarttask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartbulkdelete operation.
     * @callback module:api/ApiApi~apiTasksTasksStartbulkdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartbulkdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartbulkdelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startbulkdelete/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartchannelupdate operation.
     * @callback module:api/ApiApi~apiTasksTasksStartchannelupdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartchannelupdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartchannelupdate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startchannelupdate/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdeletechannel operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdeletechannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel and all its associated content from the server
     * @param {module:api/ApiApi~apiTasksTasksStartdeletechannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdeletechannel = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdeletechannel/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdiskbulkexport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdiskbulkexportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartdiskbulkexportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdiskbulkexport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdiskbulkexport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdiskbulkimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdiskbulkimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartdiskbulkimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdiskbulkimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdiskbulkimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdiskchannelimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdiskchannelimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartdiskchannelimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdiskchannelimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdiskchannelimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdiskcontentimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdiskcontentimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartdiskcontentimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdiskcontentimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdiskcontentimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartdiskexport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartdiskexportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a channel to a local drive, and copy content to the drive.
     * @param {module:api/ApiApi~apiTasksTasksStartdiskexportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartdiskexport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startdiskexport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartexportlogcsv operation.
     * @callback module:api/ApiApi~apiTasksTasksStartexportlogcsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dumps in csv format the required logs. By default it will be dump contentsummarylog.
     * :param: logtype: Kind of log to dump, summary or session :param: facility :returns: An object with the job information
     * @param {module:api/ApiApi~apiTasksTasksStartexportlogcsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartexportlogcsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startexportlogcsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartremotebulkimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartremotebulkimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartremotebulkimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartremotebulkimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startremotebulkimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartremotechannelimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartremotechannelimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartremotechannelimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartremotechannelimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startremotechannelimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the apiTasksTasksStartremotecontentimport operation.
     * @callback module:api/ApiApi~apiTasksTasksStartremotecontentimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * 
     * @param {module:api/ApiApi~apiTasksTasksStartremotecontentimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.apiTasksTasksStartremotecontentimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/tasks/tasks/startremotecontentimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
