/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.KolibriApi) {
      root.KolibriApi = {};
    }
    root.KolibriApi.SetupApi = factory(root.KolibriApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * Setup service.
   * @module api/SetupApi
   * @version v0
   */

  /**
   * Constructs a new SetupApi. 
   * @alias module:api/SetupApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the setupApiFacilityimportCreatesuperuser operation.
     * @callback module:api/SetupApi~setupApiFacilityimportCreatesuperuserCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a username, full name and password, create a superuser attached to the facility that was imported
     * @param {module:api/SetupApi~setupApiFacilityimportCreatesuperuserCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiFacilityimportCreatesuperuser = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/facilityimport/createsuperuser/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiFacilityimportFacilityadmins operation.
     * @callback module:api/SetupApi~setupApiFacilityimportFacilityadminsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * A group of endpoints that are used by the SetupWizard to import a facility and create a superuser
     * @param {module:api/SetupApi~setupApiFacilityimportFacilityadminsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiFacilityimportFacilityadmins = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/facilityimport/facilityadmins/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiFacilityimportGrantsuperuserpermissions operation.
     * @callback module:api/SetupApi~setupApiFacilityimportGrantsuperuserpermissionsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Given a user ID and credentials, create a superuser DevicePermissions record
     * @param {module:api/SetupApi~setupApiFacilityimportGrantsuperuserpermissionsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiFacilityimportGrantsuperuserpermissions = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/facilityimport/grantsuperuserpermissions/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiFacilityimportListfacilitylearners operation.
     * @callback module:api/SetupApi~setupApiFacilityimportListfacilitylearnersCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * If the request is done by an admin user  it will return a list of the users of the facility
     * :param baseurl: First part of the url of the server that's going to be requested :param facility_id: Id of the facility to authenticate and get the list of users :param username: Username of the user that's going to authenticate :param password: Password of the user that's going to authenticate :return: List of the learners of the facility.
     * @param {module:api/SetupApi~setupApiFacilityimportListfacilitylearnersCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiFacilityimportListfacilitylearners = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/facilityimport/listfacilitylearners/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiFacilityimportProvisiondevice operation.
     * @callback module:api/SetupApi~setupApiFacilityimportProvisiondeviceCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * After importing a Facility and designating/creating a super admins, provision the device using that facility
     * @param {module:api/SetupApi~setupApiFacilityimportProvisiondeviceCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiFacilityimportProvisiondevice = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/facilityimport/provisiondevice/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiRestartzeroconfRestart operation.
     * @callback module:api/SetupApi~setupApiRestartzeroconfRestartCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An utility endpoint to restart zeroconf after setup is finished in case this is a SoUD
     * @param {module:api/SetupApi~setupApiRestartzeroconfRestartCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiRestartzeroconfRestart = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/restartzeroconf/restart/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksCanceltask operation.
     * @callback module:api/SetupApi~setupApiSoudtasksCanceltaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task with its task id given in the task_id parameter.
     * @param {module:api/SetupApi~setupApiSoudtasksCanceltaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksCanceltask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/canceltask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksChanneldiffstats operation.
     * @callback module:api/SetupApi~setupApiSoudtasksChanneldiffstatsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksChanneldiffstatsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksChanneldiffstats = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/channeldiffstats/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksCleartask operation.
     * @callback module:api/SetupApi~setupApiSoudtasksCleartaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksCleartaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksCleartask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/cleartask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksCleartasks operation.
     * @callback module:api/SetupApi~setupApiSoudtasksCleartasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels all running tasks.
     * @param {module:api/SetupApi~setupApiSoudtasksCleartasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksCleartasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/cleartasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksCreate operation.
     * @callback module:api/SetupApi~setupApiSoudtasksCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a task for async processing.
     * API endpoint:     POST /api/tasks/  Request payload parameters:     - `task` (required): a string representing the dotted path to task function.     - all other key value pairs are passed to the validator if the       task function has one otherwise they are passed to the task function itself       as keyword args.  Keep in mind:     If a task function has a validator then dict returned by the validator     is passed to the task function as keyword args.      The validator can add `extra_metadata` in the returning dict to set `extra_metadata`     in the enqueued task.
     * @param {module:api/SetupApi~setupApiSoudtasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksDelete operation.
     * @callback module:api/SetupApi~setupApiSoudtasksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {String} id 
     * @param {module:api/SetupApi~setupApiSoudtasksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupApiSoudtasksDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksDeletefinishedtasks operation.
     * @callback module:api/SetupApi~setupApiSoudtasksDeletefinishedtasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all tasks that have succeeded, failed, or been cancelled.
     * @param {module:api/SetupApi~setupApiSoudtasksDeletefinishedtasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksDeletefinishedtasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/deletefinishedtasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksExportuserstocsv operation.
     * @callback module:api/SetupApi~setupApiSoudtasksExportuserstocsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export users, classes, roles and roles assignemnts to a csv file.
     * :param: facility_id :returns: An object with the job information
     * @param {module:api/SetupApi~setupApiSoudtasksExportuserstocsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksExportuserstocsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/exportuserstocsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksImportusersfromcsv operation.
     * @callback module:api/SetupApi~setupApiSoudtasksImportusersfromcsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Import users, classes, roles and roles assignemnts from a csv file. :param: FILE: file dictionary with the file object :param: csvfile: filename of the file stored in kolibri temp folder :param: dryrun: validate the data but don't modify the database :param: delete: Users not in the csv will be deleted from the facility, and classes cleared :returns: An object with the job information
     * @param {module:api/SetupApi~setupApiSoudtasksImportusersfromcsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksImportusersfromcsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/importusersfromcsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksList operation.
     * @callback module:api/SetupApi~setupApiSoudtasksListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksLocaldrive operation.
     * @callback module:api/SetupApi~setupApiSoudtasksLocaldriveCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksLocaldriveCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksLocaldrive = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/localdrive/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksRead operation.
     * @callback module:api/SetupApi~setupApiSoudtasksReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {String} id 
     * @param {module:api/SetupApi~setupApiSoudtasksReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupApiSoudtasksRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksRestarttask operation.
     * @callback module:api/SetupApi~setupApiSoudtasksRestarttaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a task with its task id given in the task_id parameter.
     * @param {module:api/SetupApi~setupApiSoudtasksRestarttaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksRestarttask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/restarttask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartbulkdelete operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartbulkdeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartbulkdeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartbulkdelete = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startbulkdelete/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartchannelupdate operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartchannelupdateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartchannelupdateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartchannelupdate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startchannelupdate/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdeletechannel operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdeletechannelCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a channel and all its associated content from the server
     * @param {module:api/SetupApi~setupApiSoudtasksStartdeletechannelCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdeletechannel = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdeletechannel/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdiskbulkexport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdiskbulkexportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartdiskbulkexportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdiskbulkexport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdiskbulkexport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdiskbulkimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdiskbulkimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartdiskbulkimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdiskbulkimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdiskbulkimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdiskchannelimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdiskchannelimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartdiskchannelimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdiskchannelimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdiskchannelimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdiskcontentimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdiskcontentimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartdiskcontentimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdiskcontentimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdiskcontentimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartdiskexport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartdiskexportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Export a channel to a local drive, and copy content to the drive.
     * @param {module:api/SetupApi~setupApiSoudtasksStartdiskexportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartdiskexport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startdiskexport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartexportlogcsv operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartexportlogcsvCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Dumps in csv format the required logs. By default it will be dump contentsummarylog.
     * :param: logtype: Kind of log to dump, summary or session :param: facility :returns: An object with the job information
     * @param {module:api/SetupApi~setupApiSoudtasksStartexportlogcsvCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartexportlogcsv = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startexportlogcsv/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartremotebulkimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartremotebulkimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartremotebulkimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartremotebulkimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startremotebulkimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartremotechannelimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartremotechannelimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartremotechannelimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartremotechannelimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startremotechannelimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiSoudtasksStartremotecontentimport operation.
     * @callback module:api/SetupApi~setupApiSoudtasksStartremotecontentimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Needed because TasksViewSet permissions don't allow fetch list of task or create task from a provisioning device
     * @param {module:api/SetupApi~setupApiSoudtasksStartremotecontentimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiSoudtasksStartremotecontentimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/soudtasks/startremotecontentimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksCanceltask operation.
     * @callback module:api/SetupApi~setupApiTasksCanceltaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancel a task with its task id given in the task_id parameter.
     * @param {module:api/SetupApi~setupApiTasksCanceltaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksCanceltask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/canceltask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksCleartask operation.
     * @callback module:api/SetupApi~setupApiTasksCleartaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An open version of FacilityTasksViewSet for the purposes of managing the import-facility task during setup
     * @param {module:api/SetupApi~setupApiTasksCleartaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksCleartask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/cleartask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksCleartasks operation.
     * @callback module:api/SetupApi~setupApiTasksCleartasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cancels all running tasks.
     * @param {module:api/SetupApi~setupApiTasksCleartasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksCleartasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/cleartasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksCreate operation.
     * @callback module:api/SetupApi~setupApiTasksCreateCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Enqueue a task for async processing.
     * API endpoint:     POST /api/tasks/  Request payload parameters:     - `task` (required): a string representing the dotted path to task function.     - all other key value pairs are passed to the validator if the       task function has one otherwise they are passed to the task function itself       as keyword args.  Keep in mind:     If a task function has a validator then dict returned by the validator     is passed to the task function as keyword args.      The validator can add `extra_metadata` in the returning dict to set `extra_metadata`     in the enqueued task.
     * @param {module:api/SetupApi~setupApiTasksCreateCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksCreate = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksDelete operation.
     * @callback module:api/SetupApi~setupApiTasksDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An open version of FacilityTasksViewSet for the purposes of managing the import-facility task during setup
     * @param {String} id 
     * @param {module:api/SetupApi~setupApiTasksDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksDelete = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupApiTasksDelete");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/{id}/', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksDeletefinishedtasks operation.
     * @callback module:api/SetupApi~setupApiTasksDeletefinishedtasksCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete all tasks that have succeeded, failed, or been cancelled.
     * @param {module:api/SetupApi~setupApiTasksDeletefinishedtasksCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksDeletefinishedtasks = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/deletefinishedtasks/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksList operation.
     * @callback module:api/SetupApi~setupApiTasksListCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An open version of FacilityTasksViewSet for the purposes of managing the import-facility task during setup
     * @param {module:api/SetupApi~setupApiTasksListCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksList = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksRead operation.
     * @callback module:api/SetupApi~setupApiTasksReadCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * An open version of FacilityTasksViewSet for the purposes of managing the import-facility task during setup
     * @param {String} id 
     * @param {module:api/SetupApi~setupApiTasksReadCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksRead = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling setupApiTasksRead");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/{id}/', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksRestarttask operation.
     * @callback module:api/SetupApi~setupApiTasksRestarttaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Restart a task with its task id given in the task_id parameter.
     * @param {module:api/SetupApi~setupApiTasksRestarttaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksRestarttask = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/restarttask/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setupApiTasksStartpeerfacilityimport operation.
     * @callback module:api/SetupApi~setupApiTasksStartpeerfacilityimportCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Initiate a PULL of a specific facility from another device.
     * @param {module:api/SetupApi~setupApiTasksStartpeerfacilityimportCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.setupApiTasksStartpeerfacilityimport = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['Basic'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/setup/api/tasks/startpeerfacilityimport/', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
