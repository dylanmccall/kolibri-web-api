/*
 * Kolibri API
 * Kolibri Swagger API
 *
 * OpenAPI spec version: v0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.KolibriApi) {
      root.KolibriApi = {};
    }
    root.KolibriApi.TransferSession = factory(root.KolibriApi.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';

  /**
   * The TransferSession model module.
   * @module model/TransferSession
   * @version v0
   */

  /**
   * Constructs a new <code>TransferSession</code>.
   * @alias module:model/TransferSession
   * @class
   */
  var exports = function() {
  };

  /**
   * Constructs a <code>TransferSession</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/TransferSession} obj Optional instance to populate.
   * @return {module:model/TransferSession} The populated <code>TransferSession</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();
      if (data.hasOwnProperty('id'))
        obj.id = ApiClient.convertToType(data['id'], 'String');
      if (data.hasOwnProperty('start_timestamp'))
        obj.startTimestamp = ApiClient.convertToType(data['start_timestamp'], 'Date');
      if (data.hasOwnProperty('last_activity_timestamp'))
        obj.lastActivityTimestamp = ApiClient.convertToType(data['last_activity_timestamp'], 'Date');
      if (data.hasOwnProperty('active'))
        obj.active = ApiClient.convertToType(data['active'], 'Boolean');
      if (data.hasOwnProperty('filter'))
        obj.filter = ApiClient.convertToType(data['filter'], 'String');
      if (data.hasOwnProperty('push'))
        obj.push = ApiClient.convertToType(data['push'], 'Boolean');
      if (data.hasOwnProperty('records_transferred'))
        obj.recordsTransferred = ApiClient.convertToType(data['records_transferred'], 'Number');
      if (data.hasOwnProperty('records_total'))
        obj.recordsTotal = ApiClient.convertToType(data['records_total'], 'Number');
      if (data.hasOwnProperty('bytes_received'))
        obj.bytesReceived = ApiClient.convertToType(data['bytes_received'], 'Number');
      if (data.hasOwnProperty('bytes_sent'))
        obj.bytesSent = ApiClient.convertToType(data['bytes_sent'], 'Number');
      if (data.hasOwnProperty('sync_session'))
        obj.syncSession = ApiClient.convertToType(data['sync_session'], 'String');
      if (data.hasOwnProperty('server_fsic'))
        obj.serverFsic = ApiClient.convertToType(data['server_fsic'], 'String');
      if (data.hasOwnProperty('client_fsic'))
        obj.clientFsic = ApiClient.convertToType(data['client_fsic'], 'String');
      if (data.hasOwnProperty('transfer_stage'))
        obj.transferStage = ApiClient.convertToType(data['transfer_stage'], 'String');
      if (data.hasOwnProperty('transfer_stage_status'))
        obj.transferStageStatus = ApiClient.convertToType(data['transfer_stage_status'], 'String');
    }
    return obj;
  }

  /**
   * @member {String} id
   */
  exports.prototype.id = undefined;

  /**
   * @member {Date} startTimestamp
   */
  exports.prototype.startTimestamp = undefined;

  /**
   * @member {Date} lastActivityTimestamp
   */
  exports.prototype.lastActivityTimestamp = undefined;

  /**
   * @member {Boolean} active
   */
  exports.prototype.active = undefined;

  /**
   * @member {String} filter
   */
  exports.prototype.filter = undefined;

  /**
   * @member {Boolean} push
   */
  exports.prototype.push = undefined;

  /**
   * @member {Number} recordsTransferred
   */
  exports.prototype.recordsTransferred = undefined;

  /**
   * @member {Number} recordsTotal
   */
  exports.prototype.recordsTotal = undefined;

  /**
   * @member {Number} bytesReceived
   */
  exports.prototype.bytesReceived = undefined;

  /**
   * @member {Number} bytesSent
   */
  exports.prototype.bytesSent = undefined;

  /**
   * @member {String} syncSession
   */
  exports.prototype.syncSession = undefined;

  /**
   * @member {String} serverFsic
   */
  exports.prototype.serverFsic = undefined;

  /**
   * @member {String} clientFsic
   */
  exports.prototype.clientFsic = undefined;

  /**
   * @member {module:model/TransferSession.TransferStageEnum} transferStage
   */
  exports.prototype.transferStage = undefined;

  /**
   * @member {module:model/TransferSession.TransferStageStatusEnum} transferStageStatus
   */
  exports.prototype.transferStageStatus = undefined;


  /**
   * Allowed values for the <code>transferStage</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TransferStageEnum = {
    /**
     * value: "initializing"
     * @const
     */
    initializing: "initializing",

    /**
     * value: "serializing"
     * @const
     */
    serializing: "serializing",

    /**
     * value: "queuing"
     * @const
     */
    queuing: "queuing",

    /**
     * value: "transferring"
     * @const
     */
    transferring: "transferring",

    /**
     * value: "dequeuing"
     * @const
     */
    dequeuing: "dequeuing",

    /**
     * value: "deserializing"
     * @const
     */
    deserializing: "deserializing",

    /**
     * value: "cleanup"
     * @const
     */
    cleanup: "cleanup"
  };


  /**
   * Allowed values for the <code>transferStageStatus</code> property.
   * @enum {String}
   * @readonly
   */
  exports.TransferStageStatusEnum = {
    /**
     * value: "pending"
     * @const
     */
    pending: "pending",

    /**
     * value: "started"
     * @const
     */
    started: "started",

    /**
     * value: "completed"
     * @const
     */
    completed: "completed",

    /**
     * value: "errored"
     * @const
     */
    errored: "errored"
  };

  return exports;

}));
